{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "91bda62e-d048-38ae-8541-708640cbe6e8",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "5d7f5253-d0ca-383f-9aef-57c08f8e1a6e",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "a4952bd1-2225-3c01-878a-2740dffb3c54",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "f5c59051-729e-3831-9547-730d4e28c58c",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "6d8dbeb7-606e-3766-ae9b-8991e0ff86f1",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "a598ee1e-a520-3ade-801a-644261f0453d",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "50cb0d87-f7be-33fc-995f-ff887fb81b78",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "325fb03d-8cd4-3eb1-b5b2-8ec523706ef8",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "ae1a23bc-558c-386c-b1cf-203e66b08bae",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "9ced4e79-d155-3489-b847-5ffd4221d8b5",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "36b4379e-a81f-3665-a895-50ba2b88caf2",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "71ab11aa-18fc-3e43-b581-fe5f000e2403",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "5bb282e6-d8c4-31d7-8343-ebc28d28e225",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "c3f165e3-b897-3603-94f2-71070720479c",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "c26f6d4b-20de-3d7a-bc54-76325f2c289d",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "dacec9b1-c1a9-3d46-b9c1-7570abde0952",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "d9992a27-0b63-3a4a-968e-7ebecb5b1cfa",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "f82f134b-f7d5-342d-a37b-2f769fef3925",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "d315cf55-861a-344b-a218-d95bb93f1671",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "48594c2f-4b86-3465-a86a-f2ad9d07b915",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "247b09e2-5186-30d5-9193-65265dcdcc8d",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "dda4f31b-16a9-3a84-949d-27707446748c",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "99007d33-b086-3664-9954-aa4670d09971",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "b61d2a8b-e3f6-3fdc-bc01-05ee4928f023",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "fa1fb2ed-7722-344a-9980-5355b02bcab9",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "6c841ee4-bb75-36ad-a50b-973de1f5cffd",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "2d4ca271-dd78-3ca0-963b-1e1cf1a52666",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "93e91f0c-dfa8-343d-912b-a50f71bda73b",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "631825a1-6b4d-3e20-b302-35595e934c15",
              "name": "resources.rules.detected-facebook-oauth",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.detected-facebook-oauth"
              },
              "fullDescription": {
                "text": "Facebook OAuth detected"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Facebook OAuth detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Facebook OAuth detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.detected-facebook-oauth"
                ]
              }
            },
            {
              "id": "affa1ef0-c9e5-346d-b0eb-483bec24e097",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "70849131-713c-30df-9c67-53329e46940c",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "f1d5fc92-dd65-36db-bda4-6dd25f7e26a2",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "670207d5-e247-33ad-8003-2054a6a7b716",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "608a25d1-c095-3790-af2c-faec37b12a79",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "0da796da-2264-3ab1-a39c-0567148b86e8",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "43ee2ec4-4921-39d3-b5d8-0332e97bbf35",
              "name": "resources.rules.code-after-unconditional-return",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.code-after-unconditional-return"
              },
              "fullDescription": {
                "text": "code after return statement will not be executed"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "code after return statement will not be executed\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "code after return statement will not be executed\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.code-after-unconditional-return"
                ]
              }
            },
            {
              "id": "fa58787a-eb4d-306d-a7b0-4d9bf2e4d75f",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "54053792-4624-3bc1-925d-261f1dc13d5a",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "f8fddd26-f8a5-3ae7-83fb-0efc776fbffc",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "5659122e-2b96-3d97-8dd7-20fab09cac9d",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "ad607fe3-6ada-3806-8852-97b7f7413f8f",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "1b2e3179-f77c-3c61-b8f4-84860b27fd95",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "a6ab73ab-94c1-355b-a5e3-20d659435406",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "4717c337-b37a-3b2d-ac13-e5864888db98",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "0aa23e5d-21a3-3a4f-9ae8-a387fb05a0ac",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "472cfa9a-4679-3d98-949c-7d9e5a4ba601",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "f037810b-1c4d-386d-acff-af5191844d32",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "cb5f1cfe-19d0-3b06-ab41-2cbe347d4ce6",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "a13d9bf3-4194-35f4-bcd9-c265c8277824",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "0fa28af2-43a1-373f-a877-02fde9acd90c",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "ee5bb9b7-7e48-3666-83c7-c944a95d0a35",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "543d225f-7962-3e50-96fd-70270d2ca206",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "22995754-e6d9-36e0-81ea-24b57bc99b75",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "d7cf1ddb-f60b-33a6-b9ea-0bd377fbaae4",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "b1a6022f-0402-3227-b293-6d4590ac66d8",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "2493e205-fbf7-3a8e-bb0a-2b5e16083fd4",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "54035a41-be61-32a4-bee7-c86284e965c5",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "04572369-7095-38c8-9d13-a9a07774d51e",
              "name": "resources.rules.eqeq-is-bad",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.eqeq-is-bad"
              },
              "fullDescription": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.eqeq-is-bad"
                ]
              }
            },
            {
              "id": "72848430-8143-3595-a18b-3b16eebaaa6b",
              "name": "resources.rules.eqeq-is-bad",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.eqeq-is-bad"
              },
              "fullDescription": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.eqeq-is-bad"
                ]
              }
            },
            {
              "id": "7d3d6645-5e0f-3895-bfaf-c23839716eb1",
              "name": "resources.rules.eqeq-is-bad",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.eqeq-is-bad"
              },
              "fullDescription": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.eqeq-is-bad"
                ]
              }
            },
            {
              "id": "ca5ca387-d4f2-36f0-99fd-d89618787ecd",
              "name": "resources.rules.eqeq-is-bad",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.eqeq-is-bad"
              },
              "fullDescription": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.eqeq-is-bad"
                ]
              }
            },
            {
              "id": "e690e921-b0d7-3178-94ec-dc437fc2c966",
              "name": "resources.rules.eqeq-is-bad",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.eqeq-is-bad"
              },
              "fullDescription": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.eqeq-is-bad"
                ]
              }
            },
            {
              "id": "69c06ded-54f2-3b49-be59-5941d9815c39",
              "name": "resources.rules.eqeq-is-bad",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.eqeq-is-bad"
              },
              "fullDescription": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.eqeq-is-bad"
                ]
              }
            },
            {
              "id": "9258bd2f-4636-3266-a422-d20f33066b17",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "d93ee804-6850-3ca5-a47c-1c10716e5b55",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "dbb37896-a537-330d-a3aa-769f66aba9d3",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "fd1c1ae3-dd61-302f-a822-6b0b26027709",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "58ae3de5-6e5d-3d5c-8d75-a6fe4a4b8145",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "39955365-106b-37fe-8e7c-04ebcd1c618c",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "fd33469d-e728-3a04-9082-7b31c2e11a7a",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "f1c85584-1c18-3dba-af83-2db542be18e4",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "f6bcbea9-1686-3894-a9c6-bf5c2d3f670e",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "c7dad666-c6eb-3820-ad1a-d816a53f65ac",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "18c31573-6871-335e-bc7f-92a9804e8e53",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "03bd8f4a-6845-34d6-aeee-cad198866f24",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "d7c73a06-c67f-33a8-afb5-8075d9368b0e",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "14c9fcfe-ff77-3ed7-8330-babda092d6cf",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "d9ea5204-33b8-314b-bb63-8a8ba54450d2",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "b12f7d16-4718-3daa-a710-1674700bed46",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "735d7db0-cceb-32af-8902-3b4abba72ac6",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "95820df8-50a2-3650-acfc-ed08de8d63e7",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "7b2abe89-39db-3339-b2b7-2dc6a5591a69",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "5114ba87-2922-3bdd-b952-5ff8dd8cd22e",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "1b4e4801-5f89-3993-a897-9de3ac11cb03",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "57d58478-8ce7-3fae-9d7f-50f10d80a8d5",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "2a7693aa-1c83-39a9-942b-a811d973a2f0",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "1c561c2f-1afe-35ec-adb8-c73b028d1b4c",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "82a35583-5306-3a91-9748-fa6f1b0c5b6a",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "4dce7258-3df8-3d72-b203-b4a03b328c01",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "93657ced-bc4b-3ca6-b65f-b63f098667c4",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "164fa400-cee7-3da1-98fa-1f07f549cf12",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "0466a9da-8017-3c7d-994a-6ebebbd9a977",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "6f66c08a-ab2d-3978-9d86-15b372ac356d",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "8b4d6699-f6f5-3b28-9082-0ba4a88ae080",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "902cc97f-b182-3e62-8680-375774fa4d07",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "963b38f4-a05a-3c8a-b63e-12ea7e7f66f7",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "e1cda131-85e6-3272-bcd0-9ecfcab5728a",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "8fd6ce8d-fe77-3d8a-9fdb-b725ba5c7203",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "9f20f984-c979-3b78-93d4-6af774343cb7",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "a9f46f1e-43c5-3223-9e07-c667af563899",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "9ff3939b-5cd0-3393-b3c5-7001d838c850",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "60bed482-76a2-3b1d-9bd3-f9b5483175f7",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "34afb94e-be60-388a-b0f3-342af58028d2",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "a17f807c-a146-324e-8b15-2365590f9a18",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "689ef2a8-3fca-3577-add5-261e9e626b07",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "c492dd2d-3bfd-396c-af00-95b1a06aa239",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "88713006-c762-382c-a6e8-5a0a4f01d8a9",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "e5e2d78c-1a61-3670-8ba6-eb903c30ff8c",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "ab4475da-b55d-3f85-af44-e055ddc16662",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "49c99b47-f823-3a7c-9de0-9d49e79da051",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "34d0ffe5-3cba-3afc-a266-b9444587120f",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "d879694a-2125-312c-80e2-d2f8812ded4c",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "09a951fe-b0ba-360d-a42c-555ffa090405",
              "name": "resources.rules.no-interpolation-in-tag",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.no-interpolation-in-tag"
              },
              "fullDescription": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/golang/go/issues/19669](https://github.com/golang/go/issues/19669)\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.no-interpolation-in-tag"
                ]
              }
            },
            {
              "id": "c5746d28-da83-3587-9ce5-6e9b54c9484d",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "211e5678-f705-3959-a4ed-88a44377f80b",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "04601aab-6cde-3797-ae1c-4337f64d13a6",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "3124cfb4-90d3-3883-8d6e-9cb55c2f7090",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "e8c1cc71-a8d3-3e13-b70a-18eea4267ea5",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "3d291ae8-e50b-37f8-8265-9c1fd7aee9ad",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "fd131cce-06e7-35bc-a8a5-55e7ce77ee9a",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "d6d26758-b5b6-3d0f-be36-61624bb51dc6",
              "name": "resources.rules.insecure-compile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-compile-use"
              },
              "fullDescription": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'compile' function is not secure against maliciously constructed input\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'compile' function is not secure against maliciously constructed input\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-compile-use"
                ]
              }
            },
            {
              "id": "9fcfccad-b38a-32d3-8182-eb87efd0e827",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "041fa3f3-2dae-32d4-8b61-30a5ca74ed16",
              "name": "resources.rules.incorrect-use-ato-fn",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.incorrect-use-ato-fn"
              },
              "fullDescription": {
                "text": "Avoid the 'ato*()' family of functions. Their use can lead to undefined\nbehavior, integer overflows, and lack of appropriate error handling. Instead\nprefer the 'strtol*()' family of functions.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Avoid the 'ato*()' family of functions. Their use can lead to undefined\nbehavior, integer overflows, and lack of appropriate error handling. Instead\nprefer the 'strtol*()' family of functions.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid the 'ato*()' family of functions. Their use can lead to undefined\nbehavior, integer overflows, and lack of appropriate error handling. Instead\nprefer the 'strtol*()' family of functions.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/q/38393162](https://stackoverflow.com/q/38393162)\n - [https://stackoverflow.com/q/14176123](https://stackoverflow.com/q/14176123)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.incorrect-use-ato-fn"
                ]
              }
            },
            {
              "id": "06484843-4c09-3224-a95e-2cdde13a9150",
              "name": "resources.rules.raptor-command-injection",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-command-injection"
              },
              "fullDescription": {
                "text": "The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/78](https://cwe.mitre.org/data/definitions/78)\n - [https://cwe.mitre.org/data/definitions/88](https://cwe.mitre.org/data/definitions/88)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-command-injection"
                ]
              }
            },
            {
              "id": "4728fcb9-f1ac-3931-853e-20e413a79813",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "b819e8ef-7aab-3e87-8c5b-5538a0b4a5d7",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "e9280495-f31a-3502-8869-79e45c8c0148",
              "name": "resources.rules.insecure-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-subprocess-use"
              },
              "fullDescription": {
                "text": "The Python 'subprocess' module called with 'shell=True' may allow for shell injection"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'subprocess' module called with 'shell=True' may allow for shell injection\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'subprocess' module called with 'shell=True' may allow for shell injection\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-subprocess-use"
                ]
              }
            },
            {
              "id": "3009fd4a-9e18-3ae0-a3f0-ffc5fffd40cc",
              "name": "resources.rules.insecure-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-subprocess-use"
              },
              "fullDescription": {
                "text": "The Python 'subprocess' module called with 'shell=True' may allow for shell injection"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'subprocess' module called with 'shell=True' may allow for shell injection\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'subprocess' module called with 'shell=True' may allow for shell injection\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-subprocess-use"
                ]
              }
            },
            {
              "id": "e0d28914-060f-3564-8e8c-eaaf618b6735",
              "name": "python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2",
              "shortDescription": {
                "text": "Opengrep Finding: python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2"
              },
              "fullDescription": {
                "text": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2",
              "help": {
                "text": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2)\n - [https://jinja.palletsprojects.com/en/2.11.x/api/#basics](https://jinja.palletsprojects.com/en/2.11.x/api/#basics)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2"
                ]
              }
            },
            {
              "id": "fff74b80-4d4e-382c-bb5b-dd660500540f",
              "name": "resources.rules.insecure-hash-algorithm-md5",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-hash-algorithm-md5"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-hash-algorithm-md5"
                ]
              }
            },
            {
              "id": "6a7fa310-6fcd-3a5d-9910-c8bedab729aa",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "4a5eeadd-acd8-3cac-9528-71d449350071",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "12240d01-9797-3ecc-a767-7c38ea4e1060",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "069b18a2-d5e6-39c8-a483-b61bbf452599",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "7e933993-93f2-306b-9572-b58196c3fb24",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "7b39d882-12fe-30f4-837b-cd1d190dd0b3",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "4403d62a-c322-3135-9448-032cc90207a6",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.eval-detected.eval-detected"
              },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "help": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.eval-detected.eval-detected"
                ]
              }
            },
            {
              "id": "617e498f-f8e1-3764-ade4-0f9362300105",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "1402ef3a-9aca-30a9-9521-7bd1d2392392",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "3901513a-b0ef-3be6-8b5c-7d5a48169c89",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "a4bddb2c-9e15-3872-af5a-a812a3ff465b",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "6f300418-468a-3f0e-b12b-86da5626aa99",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "c88c0981-64ec-32a1-930b-0cc4cc9d2ac4",
              "name": "resources.rules.tempfile-without-flush",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.tempfile-without-flush"
              },
              "fullDescription": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.tempfile-without-flush"
                ]
              }
            },
            {
              "id": "a0d4e265-faac-39c9-a82d-835370fbbb69",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "6dfcb85c-03a8-3cd8-b9b5-9d4de93d9502",
              "name": "resources.rules.default-mutable-dict",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.default-mutable-dict"
              },
              "fullDescription": {
                "text": "Function $F mutates default dict $D. Python only instantiates default function arguments once and shares the instance across the function calls. If the default function argument is mutated, that will modify the instance used by all future function calls. This can cause unexpected results, or lead to security vulnerabilities whereby one function consumer can view or modify the data of another function consumer. Instead, use a default argument (like None) to indicate that no argument was provided and instantiate a new dictionary at that time. For example: `if $D is None: $D = {}`."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Function $F mutates default dict $D. Python only instantiates default function arguments once and shares the instance across the function calls. If the default function argument is mutated, that will modify the instance used by all future function calls. This can cause unexpected results, or lead to security vulnerabilities whereby one function consumer can view or modify the data of another function consumer. Instead, use a default argument (like None) to indicate that no argument was provided and instantiate a new dictionary at that time. For example: `if $D is None: $D = {}`.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Function $F mutates default dict $D. Python only instantiates default function arguments once and shares the instance across the function calls. If the default function argument is mutated, that will modify the instance used by all future function calls. This can cause unexpected results, or lead to security vulnerabilities whereby one function consumer can view or modify the data of another function consumer. Instead, use a default argument (like None) to indicate that no argument was provided and instantiate a new dictionary at that time. For example: `if $D is None: $D = {}`.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.default-mutable-dict"
                ]
              }
            },
            {
              "id": "4250acb9-dc19-3aa2-8ebf-bba3a8629f30",
              "name": "resources.rules.missing-ratelimit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-ratelimit"
              },
              "fullDescription": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart](https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-ratelimit"
                ]
              }
            },
            {
              "id": "122402ff-bfa4-37b3-9914-8dfa24fd1c23",
              "name": "resources.rules.missing-ratelimit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-ratelimit"
              },
              "fullDescription": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart](https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-ratelimit"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "91bda62e-d048-38ae-8541-708640cbe6e8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/aot/pa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 12,
                  "endLine": 33,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    return compile(\n        config.gqa_ratio,\n        config.head_size,\n        config.npar_loops,\n        config.dtype,\n        config.kv_dtype,\n        config.fp8_kv_dtype,\n        config.out_dtype,\n        config.block_size,\n        config.alibi_enabled,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a30e2a9e19b3b56ee33548c5a50d4f573b7b0f9c00deac6d3dbf2de16a85a17f913d43b5698f349c630cd1df2b5c3ac95418ba79582795d728088df0fce895a9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5d7f5253-d0ca-383f-9aef-57c08f8e1a6e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/aot/asm_mla_decode_fwd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 12,
                  "endLine": 28,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    return compile(\n        config.hsaco_path,\n        config.page_size,\n        config.q_itemsize,\n        config.kv_itemsize,\n        config.num_kv_splits,\n        config.v_head_dim,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "36d986014342bfe3e002f808e5f89983818b1cf5c031b1b62af2ea37bc7d186403d5e252f17b47aad888bf1da6c2b0667f8a805233eceef00448e74540f42dec_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a4952bd1-2225-3c01-878a-2740dffb3c54",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/aot/pa_ragged.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 12,
                  "endLine": 33,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    return compile(\n        config.gqa_ratio,\n        config.head_size,\n        config.npar_loops,\n        config.dtype,\n        config.kv_dtype,\n        config.fp8_kv_dtype,\n        config.out_dtype,\n        config.block_size,\n        config.alibi_enabled,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5a8aa3ca67c09477a516f5faf1e8785ac8ecb62ebae625aee3aecb05a066bbc77b73e49ffd6fe7e9971ec8027c4cc40d83a474195a7a7f93d6f0c2f4ac935bc3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f5c59051-729e-3831-9547-730d4e28c58c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/fused_moe.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 9,
                  "endLine": 425,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        os.system(\n            f\"{PY} {get_asm_dir()}/fmoe_2stages/tune.py -i {untune_file} -o {tune_file} -o2 {profile_file} --last\"\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "879a215b00295980d3b59207febef2ab46a904a469129e50cd807b64ac099200ab2a5ffadfaea2eb7ea7ff5a84e48e763ce5782e12022c53aaf31699c817e98b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6d8dbeb7-606e-3766-ae9b-8991e0ff86f1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 14,
                  "endLine": 58,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    aiter_ = importlib.import_module(f\"{__package__}.aiter_\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9556270060d56ae99c1458039d3e0f19cc66758e45e794f2692c273d0c3e20713caf8d1204e46ed456f5790d0ff26b3395ff8b505bb7843f87bfb9083b40593f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a598ee1e-a520-3ade-801a-644261f0453d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 11,
                  "endLine": 155,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    ret = os.system(f\"hipcc {flag_hip} -x hip -c /dev/null -o /dev/null\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b217c550ab6bce63c75aee491ddcd4d11520b143a7e6e81e399aa887caee795a6e46b5d04f2d3d88e8e0793e3b66b2c3232128164db2ae6cc5b248cf703576e4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "50cb0d87-f7be-33fc-995f-ff887fb81b78",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 26,
                  "endLine": 228,
                  "endColumn": 77,
                  "snippet": {
                    "text": "        __mds[md_name] = importlib.import_module(f\"{__package__}.{md_name}\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "84791f8c7c59458230a05697357d97d08724ebc3b7f2769e455531773960b42aefafd70c52f8390f728198542c8661e6012d7b8b3d7d03e825450a62a77de45f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "325fb03d-8cd4-3eb1-b5b2-8ec523706ef8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 5,
                  "endLine": 243,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    os.system(f\"rm -rf {get_user_jit_dir()}/{md_name}.so\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b217c550ab6bce63c75aee491ddcd4d11520b143a7e6e81e399aa887caee795a6e46b5d04f2d3d88e8e0793e3b66b2c3232128164db2ae6cc5b248cf703576e4_1"
          },
          "properties": {}
        },
        {
          "ruleId": "ae1a23bc-558c-386c-b1cf-203e66b08bae",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 5,
                  "endLine": 255,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    os.system(f\"rm -rf {bd_dir}/{md_name}\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b217c550ab6bce63c75aee491ddcd4d11520b143a7e6e81e399aa887caee795a6e46b5d04f2d3d88e8e0793e3b66b2c3232128164db2ae6cc5b248cf703576e4_3"
          },
          "properties": {}
        },
        {
          "ruleId": "9ced4e79-d155-3489-b847-5ffd4221d8b5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 17,
                  "endLine": 346,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                os.system(f\"{PY} {blob_gen_cmd.format(blob_dir)}\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b217c550ab6bce63c75aee491ddcd4d11520b143a7e6e81e399aa887caee795a6e46b5d04f2d3d88e8e0793e3b66b2c3232128164db2ae6cc5b248cf703576e4_4"
          },
          "properties": {}
        },
        {
          "ruleId": "36b4379e-a81f-3665-a895-50ba2b88caf2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 9,
                  "endLine": 249,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        os.system(f\"rm -rf {CK_DIR}\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b217c550ab6bce63c75aee491ddcd4d11520b143a7e6e81e399aa887caee795a6e46b5d04f2d3d88e8e0793e3b66b2c3232128164db2ae6cc5b248cf703576e4_2"
          },
          "properties": {}
        },
        {
          "ruleId": "71ab11aa-18fc-3e43-b581-fe5f000e2403",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"error:\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 21,
                  "endLine": 407,
                  "endColumn": 22,
                  "snippet": {
                    "text": "                    re.sub(\n                        \"error:\",\n                        \"\\033[31merror:\\033[0m\",\n                        \"-->\".join(traceback.format_exception(*sys.exc_info())),\n                        flags=re.I,\n                    ),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0de60eb9bc0d78d169f2e47546c1ea3ac8c269558208913dbfce81ba766f20fabf8e28a11c85784640ecb42eb8fc9d7e2e1fa985766a27ca26322aad88ed1c55_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5bb282e6-d8c4-31d7-8343-ebc28d28e225",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 36,
                  "endLine": 443,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                        val[idx] = eval(el)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2262b320adc6fca037747076b02fba9cdddad6c578b1e109e2797eaa058563f11b44c4022d61cb7595054d1dfeed3e99f9ded5f1ef7d42f0dcf405fcef6794c6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c3f165e3-b897-3603-94f2-71070720479c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"<(.*?)\\:.*?>\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 745,
                  "startColumn": 31,
                  "endLine": 745,
                  "endColumn": 73,
                  "snippet": {
                    "text": "                    doc_str = re.sub(r\"<(.*?)\\:.*?>\", r\"\\g<1>\", doc_str)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3845d6b5f19374a086347e5076a2cf800a5d0556286597928f0cfc1fb243e8d0adbb6f7a67e12f67ccba12b984b5a8a094c7eed9533f6140f21193d2b8706094_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c26f6d4b-20de-3d7a-bc54-76325f2c289d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 28,
                  "endLine": 446,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                d_ops[k] = eval(val)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2262b320adc6fca037747076b02fba9cdddad6c578b1e109e2797eaa058563f11b44c4022d61cb7595054d1dfeed3e99f9ded5f1ef7d42f0dcf405fcef6794c6_1"
          },
          "properties": {}
        },
        {
          "ruleId": "dacec9b1-c1a9-3d46-b9c1-7570abde0952",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 21,
                  "endLine": 751,
                  "endColumn": 80,
                  "snippet": {
                    "text": "                    exec(f\"from aiter import*\\ndef {doc_str}: pass\", namespace)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "14416493277b17924371348fed81b82f2aa3e636436ff07aa8b65319c037c579301ddd1f080e49b4751c0bd1d207020e2c6e2cf95a89631b5fdaf690840d45b9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d9992a27-0b63-3a4a-968e-7ebecb5b1cfa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/chip_info.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 18,
                  "endLine": 34,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        result = subprocess.run(\n            [rocminfo],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            check=True,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a1b9eb488036b4782a76c211ecd6a7f5a386a370b88ea3a1908bf8262c4ec99c1698ea112df15d1321b601712ae92e6cba4a119e40abb2600c60ce9dab73c0f7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f82f134b-f7d5-342d-a37b-2f769fef3925",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/chip_info.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 22,
                  "endLine": 101,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            result = subprocess.run(\n                [rocminfo], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a1b9eb488036b4782a76c211ecd6a7f5a386a370b88ea3a1908bf8262c4ec99c1698ea112df15d1321b601712ae92e6cba4a119e40abb2600c60ce9dab73c0f7_2"
          },
          "properties": {}
        },
        {
          "ruleId": "d315cf55-861a-344b-a218-d95bb93f1671",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/chip_info.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 22,
                  "endLine": 52,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            result = subprocess.run(\n                [rocminfo], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a1b9eb488036b4782a76c211ecd6a7f5a386a370b88ea3a1908bf8262c4ec99c1698ea112df15d1321b601712ae92e6cba4a119e40abb2600c60ce9dab73c0f7_1"
          },
          "properties": {}
        },
        {
          "ruleId": "48594c2f-4b86-3465-a86a-f2ad9d07b915",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"Agent\\s*\\d+\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/chip_info.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 23,
                  "endLine": 103,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            devices = re.split(r\"Agent\\s*\\d+\", output)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "dd63fc04290bbd0b202974164220077e0acd4e936d0dceefb3206615170db2cadf5e1474e04a25bc8927e8702022e3950438faf59cb696da71d63bf2c7de8f6e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "247b09e2-5186-30d5-9193-65265dcdcc8d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_output' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/cpp_extension.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 18,
                  "endLine": 91,
                  "endColumn": 78,
                  "snippet": {
                    "text": "        output = subprocess.check_output([hipconfig, \"--version\"], text=True)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9f0059ed3f9fe324319aead28598888b5fcaff2b5f972343345ff87480d1fd620b6556c49dc6f34334195c8a92ab019b8f8dc5e88de8c6f7261462e79e071dd1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "dda4f31b-16a9-3a84-949d-27707446748c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\d+\\.\\d+\\.\\d+\\w+\\+\\w+\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/cpp_extension.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 37,
                  "endLine": 185,
                  "endColumn": 73,
                  "snippet": {
                    "text": "BUILT_FROM_SOURCE_VERSION_PATTERN = re.compile(r\"\\d+\\.\\d+\\.\\d+\\w+\\+\\w+\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9d3e3a77b1f2a88d21f5314cde21438e9fed829d40fd3b023c903b4ef5922815f3d0e40c3b3cfb6391da05515616b8ea1349ab2bf61f43f5b5183c7cc231885f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "99007d33-b086-3664-9954-aa4670d09971",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"Compute Unit\\s*:\\s*(\\d+)\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/chip_info.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 33,
                  "endLine": 108,
                  "endColumn": 79,
                  "snippet": {
                    "text": "                        match = re.search(r\"Compute Unit\\s*:\\s*(\\d+)\", device)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0f2fd54784a0d3998d50ed0b081ec72e6c1f041f39a7f192eaa081ac38e2fd6a40aba91a2a888680f2ee9a277913abc0ab6047f3d69b16158ed48520693b45aa_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b61d2a8b-e3f6-3fdc-bc01-05ee4928f023",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_output' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/cpp_extension.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 22,
                  "endLine": 299,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    version_string = subprocess.check_output(\n        [compiler, \"-v\"], stderr=subprocess.STDOUT, env=env\n    ).decode(*SUBPROCESS_DECODE_ARGS)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9f0059ed3f9fe324319aead28598888b5fcaff2b5f972343345ff87480d1fd620b6556c49dc6f34334195c8a92ab019b8f8dc5e88de8c6f7261462e79e071dd1_1"
          },
          "properties": {}
        },
        {
          "ruleId": "fa1fb2ed-7722-344a-9980-5355b02bcab9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"^COLLECT_GCC=(.*)$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/cpp_extension.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 19,
                  "endLine": 302,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        pattern = re.compile(\"^COLLECT_GCC=(.*)$\", re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "95c91d83c1fc455863b1d882ca633e9b53b41789209e9e070780a7624511b233718ae304c936eb75918bfa3a0f151657a19f6ff5fa0fd2a39f4d73719157aee8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6c841ee4-bb75-36ad-a50b-973de1f5cffd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `pattern` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/cpp_extension.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 19,
                  "endLine": 303,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        results = re.findall(pattern, version_string)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bbcc1d57de40b317dd272b1d4830c1cbdfabd6f0db5575f0f30baa7ef671866454078586b31e8e117b166112cdc148f0020fa9c87005713f0dd7ac86ac8e01ce_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2d4ca271-dd78-3ca0-963b-1e1cf1a52666",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_output' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/cpp_extension.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 26,
                  "endLine": 358,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            versionstr = subprocess.check_output(\n                [compiler, \"-dumpfullversion\", \"-dumpversion\"]\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9f0059ed3f9fe324319aead28598888b5fcaff2b5f972343345ff87480d1fd620b6556c49dc6f34334195c8a92ab019b8f8dc5e88de8c6f7261462e79e071dd1_2"
          },
          "properties": {}
        },
        {
          "ruleId": "93e91f0c-dfa8-343d-912b-a50f71bda73b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"(\\d+)\\.(\\d+)\\.(\\d+)\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/cpp_extension.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 21,
                  "endLine": 362,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            match = re.search(\n                r\"(\\d+)\\.(\\d+)\\.(\\d+)\",\n                versionstr.decode(*SUBPROCESS_DECODE_ARGS).strip(),\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9242536d37ef5dbc7094d10dae4d6e5fa42fa60d0b8c5261c0623ccb445fae8ca19e76100815c1a55d966efbe91154a61f8d3c2f35bb1faed6cbd71d2834503d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "631825a1-6b4d-3e20-b302-35595e934c15",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Facebook OAuth detected"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/cpp_extension.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 802,
                  "startColumn": 58,
                  "endLine": 802,
                  "endColumn": 132,
                  "snippet": {
                    "text": "    Complete workaround code example: https://github.com/facebookresearch/pytorch3d/commit/cb170ac024a949f1f9614ffe6af1c38d972f7d48"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cf031997f0bddeb1859d2210d3dc9203e450305a6782c95e8ff68ada5b368654415168ff4d8f47e3f84a81826545497e3ad827ee2cead7058469658986cad3c3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "affa1ef0-c9e5-346d-b0eb-483bec24e097",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_output' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/cpp_extension.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1114,
                  "startColumn": 30,
                  "endLine": 1116,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            version_string = subprocess.check_output(\n                [compiler, \"--version\"], stderr=subprocess.STDOUT, env=env\n            ).decode(*SUBPROCESS_DECODE_ARGS)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9f0059ed3f9fe324319aead28598888b5fcaff2b5f972343345ff87480d1fd620b6556c49dc6f34334195c8a92ab019b8f8dc5e88de8c6f7261462e79e071dd1_4"
          },
          "properties": {}
        },
        {
          "ruleId": "70849131-713c-30df-9c67-53329e46940c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_output' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/cpp_extension.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1109,
                  "startColumn": 26,
                  "endLine": 1111,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        version_string = subprocess.check_output(\n            [compiler, \"-v\"], stderr=subprocess.STDOUT, env=env\n        ).decode(*SUBPROCESS_DECODE_ARGS)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9f0059ed3f9fe324319aead28598888b5fcaff2b5f972343345ff87480d1fd620b6556c49dc6f34334195c8a92ab019b8f8dc5e88de8c6f7261462e79e071dd1_3"
          },
          "properties": {}
        },
        {
          "ruleId": "f1d5fc92-dd65-36db-bda4-6dd25f7e26a2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"^COLLECT_GCC=(.*)$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/cpp_extension.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1120,
                  "startColumn": 15,
                  "endLine": 1120,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    pattern = re.compile(\"^COLLECT_GCC=(.*)$\", re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "95c91d83c1fc455863b1d882ca633e9b53b41789209e9e070780a7624511b233718ae304c936eb75918bfa3a0f151657a19f6ff5fa0fd2a39f4d73719157aee8_1"
          },
          "properties": {}
        },
        {
          "ruleId": "670207d5-e247-33ad-8003-2054a6a7b716",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `pattern` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/cpp_extension.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1121,
                  "startColumn": 15,
                  "endLine": 1121,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    results = re.findall(pattern, version_string)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bbcc1d57de40b317dd272b1d4830c1cbdfabd6f0db5575f0f30baa7ef671866454078586b31e8e117b166112cdc148f0020fa9c87005713f0dd7ac86ac8e01ce_1"
          },
          "properties": {}
        },
        {
          "ruleId": "608a25d1-c095-3790-af2c-faec37b12a79",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_output' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/cpp_extension.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1358,
                  "startColumn": 9,
                  "endLine": 1358,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        subprocess.check_output(\"ninja --version\".split())"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9f0059ed3f9fe324319aead28598888b5fcaff2b5f972343345ff87480d1fd620b6556c49dc6f34334195c8a92ab019b8f8dc5e88de8c6f7261462e79e071dd1_5"
          },
          "properties": {}
        },
        {
          "ruleId": "0da796da-2264-3ab1-a39c-0567148b86e8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/cpp_extension.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1478,
                  "startColumn": 9,
                  "endLine": 1485,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        subprocess.run(\n            command,\n            stdout=stdout_fileno if verbose else subprocess.PIPE,\n            stderr=subprocess.STDOUT,\n            cwd=build_directory,\n            check=True,\n            env=env,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d36bc47c27f903a93f8d74c653327fff42b38fe6978cee8e7d04b461ddbad1248e19bfca26aeb37346e2a0750c44605897b549477f169c54535eb2108c981a9d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "43ee2ec4-4921-39d3-b5d8-0332e97bbf35",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "code after return statement will not be executed"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/cpp_extension.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1505,
                  "startColumn": 9,
                  "endLine": 1507,
                  "endColumn": 77,
                  "snippet": {
                    "text": "        return None\n        # https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path\n        spec = importlib.util.spec_from_file_location(module_name, filepath)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "677c0aa284eba13aa94949981dc775f48444be3127dad3c78c822d816d0a64780339760663eb1d316ad5b2f8f32fbbac963d859790cd200de340c03cd0640d8c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fa58787a-eb4d-306d-a7b0-4d9bf2e4d75f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"([ ]+)(detail?)::[ ]+\\\\\\n[ ]+\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/hipify/hipify_python.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 20,
                  "endLine": 335,
                  "endColumn": 64,
                  "snippet": {
                    "text": "RE_KERNEL_LAUNCH = re.compile(r\"([ ]+)(detail?)::[ ]+\\\\\\n[ ]+\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "dd90373c09171bf1b68453f8bb4078904b3e76dbde10824423d1ec184e565faaf4225cb66dda1eabc87dc53fc3744323c8c0fd468e0488e2d98796c5aa0bf134_0"
          },
          "properties": {}
        },
        {
          "ruleId": "54053792-4624-3bc1-925d-261f1dc13d5a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\bassert[ ]*\\(\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/hipify/hipify_python.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 561,
                  "startColumn": 13,
                  "endLine": 561,
                  "endColumn": 42,
                  "snippet": {
                    "text": "RE_ASSERT = re.compile(r\"\\bassert[ ]*\\(\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "74d1aa01535b3f972ab7833fb8904c0c2ad1d1fda056c52d7d45ef682430fabf57cf169ec1bdc876dd7cacd4f86822c0f49145f5087c4e4ff8e989fb3387c383_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f8fddd26-f8a5-3ae7-83fb-0efc776fbffc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\":?:?\\b(__syncthreads)\\b(\\w*\\()\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/hipify/hipify_python.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 18,
                  "endLine": 582,
                  "endColumn": 63,
                  "snippet": {
                    "text": "RE_SYNCTHREADS = re.compile(r\":?:?\\b(__syncthreads)\\b(\\w*\\()\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "31eb909b3e156381c8cb993f1e2d512001b475d481d880d83f4042d582e6fb4fc886507f7683980462d4980ebe9829e53f55ddafc82ea266434c47668df1b5e2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5659122e-2b96-3d97-8dd7-20fab09cac9d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `rf'#include (\"{ext}\"|<{ext}>)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/hipify/hipify_python.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 12,
                  "endLine": 597,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    if any(re.search(rf'#include (\"{ext}\"|<{ext}>)', output_string) for ext in headers):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3a9b40db4ee0bca066a1f917f87018d57923f998db8d588b04bf13c41335c1727598e43a15c70cf4d12d2ba5ba82db84d75a94c93b04abcea8802297dadf6393_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ad607fe3-6ada-3806-8852-97b7f7413f8f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"extern\\s+([\\w\\(\\)]+)?\\s*__shared__\\s+([\\w:<>\\s]+)\\s+(\\w+)\\s*\\[\\s*\\]\\s*;\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/hipify/hipify_python.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 614,
                  "startColumn": 20,
                  "endLine": 616,
                  "endColumn": 2,
                  "snippet": {
                    "text": "RE_EXTERN_SHARED = re.compile(\n    r\"extern\\s+([\\w\\(\\)]+)?\\s*__shared__\\s+([\\w:<>\\s]+)\\s+(\\w+)\\s*\\[\\s*\\]\\s*;\"\n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b8e4fbc48ef4bf4ddd9e4c50b25ced235ca10d7d84cf8cd0da4aab1c5662c86d8efca173c2fb469a7a2ab36323b0e307cfb0942d4259b6b6bbe9d8f1a9492e1c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1b2e3179-f77c-3c61-b8f4-84860b27fd95",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `CAFFE2_TRIE.export_to_regex()` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/hipify/hipify_python.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 893,
                  "startColumn": 26,
                  "endLine": 893,
                  "endColumn": 67,
                  "snippet": {
                    "text": "RE_CAFFE2_PREPROCESSOR = re.compile(CAFFE2_TRIE.export_to_regex())"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "26339561584c4893ce5e2829407277c5fee67b958bf2115522be3262a8c19e488fd84773662d92ece3e60c4b0634ce7f5ad5342c4b1dbf2d7323c289a6e4f289_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a6ab73ab-94c1-355b-a5e3-20d659435406",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `rf\"(?<=\\W)({PYTORCH_TRIE.export_to_regex()})(?=\\W)\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/hipify/hipify_python.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 27,
                  "endLine": 896,
                  "endColumn": 2,
                  "snippet": {
                    "text": "RE_PYTORCH_PREPROCESSOR = re.compile(\n    rf\"(?<=\\W)({PYTORCH_TRIE.export_to_regex()})(?=\\W)\"\n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "32069f989c30b0b33d24925435a8d9fdbb7c2329d0cc2efa173dfd36d67e340660d17197cafdc29aebd6c5e3e08e7d36d15a2c7633b7c5db81ca14af2bc735b4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4717c337-b37a-3b2d-ac13-e5864888db98",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'#include \"([^\"]+)\"'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/hipify/hipify_python.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 898,
                  "startColumn": 19,
                  "endLine": 898,
                  "endColumn": 52,
                  "snippet": {
                    "text": "RE_QUOTE_HEADER = re.compile(r'#include \"([^\"]+)\"')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "96ee2be1e04898ed6bc2b0c7e0d9f230d4a397c3cd58c98e8466e60089d5e04e1f0cd56a79bebc0a189d36e9bf5b8e0b67170711ba1cd4a7b1ed95ce5a4148c7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0aa23e5d-21a3-3a4f-9ae8-a387fb05a0ac",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"#include <([^>]+)>\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/hipify/hipify_python.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 899,
                  "startColumn": 19,
                  "endLine": 899,
                  "endColumn": 52,
                  "snippet": {
                    "text": "RE_ANGLE_HEADER = re.compile(r\"#include <([^>]+)>\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2cd16d80913131d1eafd4d922fca898390d0ed939b94fbc6dd26ba15a4c4b33a786a5f60aa5208bd9abef98ba592c94677a0e14f1ef28a11e506caee6c03f9ae_0"
          },
          "properties": {}
        },
        {
          "ruleId": "472cfa9a-4679-3d98-949c-7d9e5a4ba601",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'#define THC_GENERIC_FILE \"([^\"]+)\"'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/hipify/hipify_python.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 900,
                  "startColumn": 23,
                  "endLine": 900,
                  "endColumn": 72,
                  "snippet": {
                    "text": "RE_THC_GENERIC_FILE = re.compile(r'#define THC_GENERIC_FILE \"([^\"]+)\"')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "841d716f2e05d96cd2e975047b0930b4dfd0a85826a75093b009a672e4fd015624c931ef7783ee6dd08b81214f2ac9cb045a7e67285ba7ce82529073c0ee4cb5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f037810b-1c4d-386d-acff-af5191844d32",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\.cu\\b\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/hipify/hipify_python.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 901,
                  "startColumn": 16,
                  "endLine": 901,
                  "endColumn": 37,
                  "snippet": {
                    "text": "RE_CU_SUFFIX = re.compile(r\"\\.cu\\b\")  # be careful not to pick up .cuh"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6160b44f80ab622c75536550df121f75f66d826d42a5e5ccceb4aabbc41d29c9266e0437c708408dc3e6b45574039f8bd6f86b522a20cf89d8dd0ecc1956d8ca_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cb5f1cfe-19d0-3b06-ab41-2cbe347d4ce6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `rf\"\\b({re.escape(search_string)})\\b\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/hipify/hipify_python.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1157,
                  "startColumn": 24,
                  "endLine": 1159,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            contents = re.sub(\n                rf\"\\b({re.escape(search_string)})\\b\", lambda x: replace_string, contents\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f45ba5a4f71628c3282ba5da1ccbae57d4843a81e46a1e814328dad84d359e5fa2e77ac533fef6ac1579c7b77dd4b6523434c9661718a4315861ca7d5acfc290_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a13d9bf3-4194-35f4-bcd9-c265c8277824",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"#include .*\\n\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/jit/utils/hipify/hipify_python.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1184,
                  "startColumn": 14,
                  "endLine": 1184,
                  "endColumn": 42,
                  "snippet": {
                    "text": "RE_INCLUDE = re.compile(r\"#include .*\\n\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c4dee059d2dd4a513dfd0030fd7f81baeb381afd76ff2b5c6e497c911a94295590c15ff98840aaa08eef7b53beba4200a57081a0a3864f26d20137a9de44c1eb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0fa28af2-43a1-373f-a877-02fde9acd90c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/ops/mha.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 9,
                  "endLine": 73,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        f\"{CK_DIR}/example/ck_tile/01_fmha/generate.py -d fwd \"\n        \"--receipt 100 --filter {} --output_dir {{}}\".format(filter),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebd20524d8eef79d5d3ebafcf9ebe9ad72f6c46a346b627f92251c36a42bfa3dfa05e347874b4b00fa9e4702527d1f6e382bb95ac13f6d5cd17692e268a3d0e4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ee5bb9b7-7e48-3666-83c7-c944a95d0a35",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/ops/mha.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 13,
                  "endLine": 302,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            f\"{CK_DIR}/example/ck_tile/01_fmha/generate.py -d fwd \"\n            \"--receipt 200 --filter {} --output_dir {{}}\".format(filter_fwd)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebd20524d8eef79d5d3ebafcf9ebe9ad72f6c46a346b627f92251c36a42bfa3dfa05e347874b4b00fa9e4702527d1f6e382bb95ac13f6d5cd17692e268a3d0e4_1"
          },
          "properties": {}
        },
        {
          "ruleId": "543d225f-7962-3e50-96fd-70270d2ca206",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/ops/mha.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 13,
                  "endLine": 356,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            f\"{CK_DIR}/example/ck_tile/01_fmha/generate.py -d fwd \"\n            \"--receipt 200 --filter {} --output_dir {{}}\".format('\" \"')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebd20524d8eef79d5d3ebafcf9ebe9ad72f6c46a346b627f92251c36a42bfa3dfa05e347874b4b00fa9e4702527d1f6e382bb95ac13f6d5cd17692e268a3d0e4_2"
          },
          "properties": {}
        },
        {
          "ruleId": "22995754-e6d9-36e0-81ea-24b57bc99b75",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/ops/mha.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 507,
                  "startColumn": 9,
                  "endLine": 508,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        f\"{CK_DIR}/example/ck_tile/01_fmha/generate.py -d bwd \"\n        \"--receipt 300 --filter {} --output_dir {{}}\".format(filter),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebd20524d8eef79d5d3ebafcf9ebe9ad72f6c46a346b627f92251c36a42bfa3dfa05e347874b4b00fa9e4702527d1f6e382bb95ac13f6d5cd17692e268a3d0e4_3"
          },
          "properties": {}
        },
        {
          "ruleId": "d7cf1ddb-f60b-33a6-b9ea-0bd377fbaae4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/ops/mha.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 756,
                  "startColumn": 9,
                  "endLine": 757,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        f\"{CK_DIR}/example/ck_tile/01_fmha/generate.py -d bwd \"\n        \"--receipt 400 --filter {} --output_dir {{}}\".format(filter),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebd20524d8eef79d5d3ebafcf9ebe9ad72f6c46a346b627f92251c36a42bfa3dfa05e347874b4b00fa9e4702527d1f6e382bb95ac13f6d5cd17692e268a3d0e4_4"
          },
          "properties": {}
        },
        {
          "ruleId": "b1a6022f-0402-3227-b293-6d4590ac66d8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/ops/mha.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 831,
                  "startColumn": 9,
                  "endLine": 832,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        f\"{CK_DIR}/example/ck_tile/01_fmha/generate.py -d batch_prefill \"\n        \"--receipt 200 --filter {} --output_dir {{}}\".format(filter_fwd)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebd20524d8eef79d5d3ebafcf9ebe9ad72f6c46a346b627f92251c36a42bfa3dfa05e347874b4b00fa9e4702527d1f6e382bb95ac13f6d5cd17692e268a3d0e4_5"
          },
          "properties": {}
        },
        {
          "ruleId": "2493e205-fbf7-3a8e-bb0a-2b5e16083fd4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/test_common.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 21,
                  "endLine": 372,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    shape, dtype = [eval(line.strip()) for line in open(metafile)]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "36eb2761c0d7b6ff4665dce3683d120dfbf06f3077aef523489cfde9ddaab7e1fcfb399a2a42aa0052d688bd38ef555a029c6b6dd8b91e27d1380ddb42e58d56_0"
          },
          "properties": {}
        },
        {
          "ruleId": "54035a41-be61-32a4-bee7-c86284e965c5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "aiter/utility/mp_tuner.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 5,
                  "endLine": 92,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "51063a924562b005c8d1f0e7aa317601837fde0bb9889c5c5cbaee44ce8b4a43d15faa14d5726cef5d3190c736edac7e99e30267d3926e9723750c188bbc0b66_0"
          },
          "properties": {}
        },
        {
          "ruleId": "04572369-7095-38c8-9d13-a9a07774d51e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Adtype == Adtype is a useless equality check"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/ck_gemm_moe_2stages_codegen/gemm_moe_ck2stages_common.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 58,
                  "endLine": 293,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    if Adtype in bit16_list and Bdtype in bit16_list and Adtype == Adtype:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "85bb2ce000abbadf96c4ccddf8eab625534bc7aee3d495fe22d55715d5fd082aaaa46c3fea6b0f8be58d37c690af9f0bc2fc18054d1d688b1a4eefadabd29d2b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "72848430-8143-3595-a18b-3b16eebaaa6b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Adtype == Adtype is a useless equality check"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/ck_gemm_moe_2stages_codegen/gemm_moe_ck2stages_common.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 13,
                  "endLine": 301,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        and Adtype == Adtype"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "85bb2ce000abbadf96c4ccddf8eab625534bc7aee3d495fe22d55715d5fd082aaaa46c3fea6b0f8be58d37c690af9f0bc2fc18054d1d688b1a4eefadabd29d2b_1"
          },
          "properties": {}
        },
        {
          "ruleId": "7d3d6645-5e0f-3895-bfaf-c23839716eb1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Adtype == Adtype is a useless equality check"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/ck_gemm_moe_2stages_codegen/gemm_moe_ck2stages_common.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 58,
                  "endLine": 305,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    elif Adtype in bit8_list and Bdtype in bit8_list and Adtype == Adtype:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "85bb2ce000abbadf96c4ccddf8eab625534bc7aee3d495fe22d55715d5fd082aaaa46c3fea6b0f8be58d37c690af9f0bc2fc18054d1d688b1a4eefadabd29d2b_2"
          },
          "properties": {}
        },
        {
          "ruleId": "ca5ca387-d4f2-36f0-99fd-d89618787ecd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Adtype == Adtype is a useless equality check"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/ck_gemm_moe_2stages_codegen/gemm_moe_ck2stages_common.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 58,
                  "endLine": 340,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    if Adtype in bit16_list and Bdtype in bit16_list and Adtype == Adtype:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "85bb2ce000abbadf96c4ccddf8eab625534bc7aee3d495fe22d55715d5fd082aaaa46c3fea6b0f8be58d37c690af9f0bc2fc18054d1d688b1a4eefadabd29d2b_3"
          },
          "properties": {}
        },
        {
          "ruleId": "e690e921-b0d7-3178-94ec-dc437fc2c966",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Adtype == Adtype is a useless equality check"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/ck_gemm_moe_2stages_codegen/gemm_moe_ck2stages_common.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 13,
                  "endLine": 348,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        and Adtype == Adtype"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "85bb2ce000abbadf96c4ccddf8eab625534bc7aee3d495fe22d55715d5fd082aaaa46c3fea6b0f8be58d37c690af9f0bc2fc18054d1d688b1a4eefadabd29d2b_4"
          },
          "properties": {}
        },
        {
          "ruleId": "69c06ded-54f2-3b49-be59-5941d9815c39",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Adtype == Adtype is a useless equality check"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/ck_gemm_moe_2stages_codegen/gemm_moe_ck2stages_common.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 58,
                  "endLine": 352,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    elif Adtype in bit8_list and Bdtype in bit8_list and Adtype == Adtype:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "85bb2ce000abbadf96c4ccddf8eab625534bc7aee3d495fe22d55715d5fd082aaaa46c3fea6b0f8be58d37c690af9f0bc2fc18054d1d688b1a4eefadabd29d2b_5"
          },
          "properties": {}
        },
        {
          "ruleId": "9258bd2f-4636-3266-a422-d20f33066b17",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 12,
                  "endLine": 200,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    func = compile(\n        gqa_ratio,\n        page_size,\n        \"__hip_bfloat16\",\n        \"__hip_bfloat16\",\n        num_kv_splits,\n        v_head_dim,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "dbf061b8d8a14dfec01336a9f7756a0325644e25915cc8bd49005682c055ec4f3dd27377a14cd53253d4377c70bd3530b400ebf9aee3eda0f6ec1bfaf05a1748_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d93ee804-6850-3ca5-a47c-1c10716e5b55",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 5,
                  "endLine": 245,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    compile(**vars(args))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "dbf061b8d8a14dfec01336a9f7756a0325644e25915cc8bd49005682c055ec4f3dd27377a14cd53253d4377c70bd3530b400ebf9aee3eda0f6ec1bfaf05a1748_1"
          },
          "properties": {}
        },
        {
          "ruleId": "dbb37896-a537-330d-a3aa-769f66aba9d3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 16,
                  "endLine": 43,
                  "endColumn": 84,
                  "snippet": {
                    "text": "        size_t q_size  = batch_size * num_heads * head_size * sizeof(__hip_bfloat16);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "10988cf89c0f125915afe5f007a487c1c3a7ca1ed8cd4d13740a4536a843fa02bd752e9bb1bb68ad46f57eaba28e90687037b481dfe1f3a33327b3dd4dd6f304_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fd1c1ae3-dd61-302f-a822-6b0b26027709",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 16,
                  "endLine": 44,
                  "endColumn": 98,
                  "snippet": {
                    "text": "        size_t kv_size = num_pages * page_size * num_kv_heads * head_size * sizeof(__hip_bfloat16);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b65481b6d5baffc6d8891de29885166bb1a15fe771cff6569bcfa6c7ad408f19eaa04da3006a597a15428a1994ce854d89644c96434595ab43977951fa88b979_0"
          },
          "properties": {}
        },
        {
          "ruleId": "58ae3de5-6e5d-3d5c-8d75-a6fe4a4b8145",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 16,
                  "endLine": 45,
                  "endColumn": 98,
                  "snippet": {
                    "text": "        size_t output_size          = batch_size * num_heads * v_head_dim * sizeof(__hip_bfloat16);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "78c8d1291cf2f4abc9012f9d046900ac8138402195023450037ec5fba874aff18d71c7b9301bbcc1a668b18fd65e50c4c93c278dc541c3c31a8e432093f1a5ed_0"
          },
          "properties": {}
        },
        {
          "ruleId": "39955365-106b-37fe-8e7c-04ebcd1c618c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 16,
                  "endLine": 46,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        size_t kv_indptr_size       = (batch_size + 1) * sizeof(int32_t);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5a6ac3883313842daa68fea6409edafe0a14bcd9324b7b536253f2d5c8434236da824710ee4fcd899929d715ee33761f73cbb29374e7b2fa0e03751cb6120d4f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fd33469d-e728-3a04-9082-7b31c2e11a7a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 16,
                  "endLine": 47,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        size_t kv_page_indices_size = seq_len * sizeof(int32_t);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a6f081df70379553267c2f9dc41ee8b0fb8e7155255826454f868220d2e0d12c0f85bc9faaa5f50e9e6967ddf56dd78989be6dfeafa957c1a904ad1ff73e002b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f1c85584-1c18-3dba-af83-2db542be18e4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 16,
                  "endLine": 48,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        size_t kv_last_page_lens_size = batch_size * sizeof(int32_t);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a6c80037f73ac94194e5dfd95ed3c101ad6443df86a108bc7eca6093243cc07419913e223cc29f97563630824fc3baa71c7ab98471b60833b67e30aaee4ea75b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f6bcbea9-1686-3894-a9c6-bf5c2d3f670e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 16,
                  "endLine": 49,
                  "endColumn": 100,
                  "snippet": {
                    "text": "        size_t logits_size    = batch_size * num_kv_splits * num_heads * v_head_dim * sizeof(float);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "79796a3fdee22a4c8a2ed103ba80e36655a8adf0611b1d133b3dd5951537e35e8901d3f5a1221c965e857797a6a3cac3b9883920bfa1a9b8c462a668e583e6c4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c7dad666-c6eb-3820-ad1a-d816a53f65ac",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 16,
                  "endLine": 50,
                  "endColumn": 87,
                  "snippet": {
                    "text": "        size_t attn_lse_size  = batch_size * num_kv_splits * num_heads * sizeof(float);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7a5d1735717d46073fb22f4896bfd7090567b41746825f47df336b9d5a6aba477649c8de76fd35bb0a21e17d9ca0cbfe8d0bda354e1e9178246e68642fe7470c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "18c31573-6871-335e-bc7f-92a9804e8e53",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 16,
                  "endLine": 51,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        size_t qo_indptr_size = (batch_size + 1) * sizeof(int32_t);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4ab6a133333b67fa37f86f91972e5f573b180fab1c16be2970d2a04cb85db5f49f9757d416af1ae601bdb5d8b9c9cef89bb8b277ae522f1b07714c42ee719257_0"
          },
          "properties": {}
        },
        {
          "ruleId": "03bd8f4a-6845-34d6-aeee-cad198866f24",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 19,
                  "endLine": 53,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        HIP_CHECK(hipMalloc(&q_ptr, q_size));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c2a3bcc31e807c98bf397b5fda73135148eb15026f2877151749acb0e1362474c3a25424f474ead6ac426fa869cd9a2b0b1c058721cde4eed49584344e8d6220_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d7c73a06-c67f-33a8-afb5-8075d9368b0e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 19,
                  "endLine": 54,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        HIP_CHECK(hipMalloc(&kv_buffer_ptr, kv_size));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c2a3bcc31e807c98bf397b5fda73135148eb15026f2877151749acb0e1362474c3a25424f474ead6ac426fa869cd9a2b0b1c058721cde4eed49584344e8d6220_1"
          },
          "properties": {}
        },
        {
          "ruleId": "14c9fcfe-ff77-3ed7-8330-babda092d6cf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 19,
                  "endLine": 55,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        HIP_CHECK(hipMalloc(&output_ptr, output_size));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c2a3bcc31e807c98bf397b5fda73135148eb15026f2877151749acb0e1362474c3a25424f474ead6ac426fa869cd9a2b0b1c058721cde4eed49584344e8d6220_2"
          },
          "properties": {}
        },
        {
          "ruleId": "d9ea5204-33b8-314b-bb63-8a8ba54450d2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 19,
                  "endLine": 56,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        HIP_CHECK(hipMalloc(&qo_indptr_ptr, qo_indptr_size));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c2a3bcc31e807c98bf397b5fda73135148eb15026f2877151749acb0e1362474c3a25424f474ead6ac426fa869cd9a2b0b1c058721cde4eed49584344e8d6220_3"
          },
          "properties": {}
        },
        {
          "ruleId": "b12f7d16-4718-3daa-a710-1674700bed46",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 19,
                  "endLine": 57,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        HIP_CHECK(hipMalloc(&kv_indptr_ptr, kv_indptr_size));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c2a3bcc31e807c98bf397b5fda73135148eb15026f2877151749acb0e1362474c3a25424f474ead6ac426fa869cd9a2b0b1c058721cde4eed49584344e8d6220_4"
          },
          "properties": {}
        },
        {
          "ruleId": "735d7db0-cceb-32af-8902-3b4abba72ac6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 19,
                  "endLine": 58,
                  "endColumn": 72,
                  "snippet": {
                    "text": "        HIP_CHECK(hipMalloc(&kv_page_indices_ptr, kv_page_indices_size));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c2a3bcc31e807c98bf397b5fda73135148eb15026f2877151749acb0e1362474c3a25424f474ead6ac426fa869cd9a2b0b1c058721cde4eed49584344e8d6220_5"
          },
          "properties": {}
        },
        {
          "ruleId": "95820df8-50a2-3650-acfc-ed08de8d63e7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 19,
                  "endLine": 59,
                  "endColumn": 76,
                  "snippet": {
                    "text": "        HIP_CHECK(hipMalloc(&kv_last_page_lens_ptr, kv_last_page_lens_size));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c2a3bcc31e807c98bf397b5fda73135148eb15026f2877151749acb0e1362474c3a25424f474ead6ac426fa869cd9a2b0b1c058721cde4eed49584344e8d6220_6"
          },
          "properties": {}
        },
        {
          "ruleId": "7b2abe89-39db-3339-b2b7-2dc6a5591a69",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 19,
                  "endLine": 60,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        HIP_CHECK(hipMalloc(&logits_ptr, logits_size));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c2a3bcc31e807c98bf397b5fda73135148eb15026f2877151749acb0e1362474c3a25424f474ead6ac426fa869cd9a2b0b1c058721cde4eed49584344e8d6220_7"
          },
          "properties": {}
        },
        {
          "ruleId": "5114ba87-2922-3bdd-b952-5ff8dd8cd22e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/mla/asm_mla_decode_fwd_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 19,
                  "endLine": 61,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        HIP_CHECK(hipMalloc(&attn_lse_ptr, attn_lse_size));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c2a3bcc31e807c98bf397b5fda73135148eb15026f2877151749acb0e1362474c3a25424f474ead6ac426fa869cd9a2b0b1c058721cde4eed49584344e8d6220_8"
          },
          "properties": {}
        },
        {
          "ruleId": "1b4e4801-5f89-3993-a897-9de3ac11cb03",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/moe/asm_moe.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 23,
                  "endLine": 262,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    impl.launch_kernel<{{input_dtype}}, {{output_dtype}}, {{switch_gxy}}>(out,"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1429e940ac1b45cd2ea5dc4c701e44a939889551fb246531dd5e80d1ea0ebe2d394db070183ec3e5f7c5863e4c7628644172f3e37ce12420398fbfb7211bbe81_0"
          },
          "properties": {}
        },
        {
          "ruleId": "57d58478-8ce7-3fae-9d7f-50f10d80a8d5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/moe/asm_moe.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 23,
                  "endLine": 349,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    impl.launch_kernel<{{input_dtype}}, {{output_dtype}}, {{switch_gxy}}>(out,"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1429e940ac1b45cd2ea5dc4c701e44a939889551fb246531dd5e80d1ea0ebe2d394db070183ec3e5f7c5863e4c7628644172f3e37ce12420398fbfb7211bbe81_1"
          },
          "properties": {}
        },
        {
          "ruleId": "2a7693aa-1c83-39a9-942b-a811d973a2f0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/moe/asm_moe.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 12,
                  "endLine": 460,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    func = compile(\n        input_dtype,\n        gate_fusion,\n        gate_dtype,\n        activation,\n        selected_tile,\n        bool(fc2_smooth_scale),\n        a16,\n        block_size=block_size,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2148e9eeb82745c110fb65fd6270cb90de0972583415e4253274062acef67b71378b3da3006effa924f7ce870a9acfd692026b6081a5fff85da7987b639899dd_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1c561c2f-1afe-35ec-adb8-c73b028d1b4c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 25,
                  "endLine": 46,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        reinterpret_cast<{{dtype}}*>(tmp_out_ptr_);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "af03f52e4b1f5f09b037a83d37b686fc704817ce8345655dd4cae11d1ee4a5a836e5e46d52a4de642de559deda6394029bc3aa13e1a5d7981f0da93681c3a750_0"
          },
          "properties": {}
        },
        {
          "ruleId": "82a35583-5306-3a91-9748-fa6f1b0c5b6a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 44,
                  "endLine": 64,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    paged_attention_ll4mi_QKV_mfma16_kernel<{{dtype}},                       \n                                            {{kv_dtype}},\n                                            {% if fp8_kv_dtype == 'auto' %}\n                                            vllm::Fp8KVCacheDataType::kAuto,\n                                            {% else %}\n                                            vllm::Fp8KVCacheDataType::kFp8E4M3,\n                                            {% endif %}                              \n                                            {{block_size}},              \n                                            head_size,               \n                                            NTHR,\n                                            {{alibi_enabled}},                    \n                                            {{gqa_ratio}},\n                                            {{mtp}}>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "af03f52e4b1f5f09b037a83d37b686fc704817ce8345655dd4cae11d1ee4a5a836e5e46d52a4de642de559deda6394029bc3aa13e1a5d7981f0da93681c3a750_1"
          },
          "properties": {}
        },
        {
          "ruleId": "4dce7258-3df8-3d72-b203-b4a03b328c01",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 81,
                  "endLine": 65,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    <<<grid, block, 0, reinterpret_cast<hipStream_t>(stream)>>>(reinterpret_cast<{{dtype}}*>(query_ptr),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "af03f52e4b1f5f09b037a83d37b686fc704817ce8345655dd4cae11d1ee4a5a836e5e46d52a4de642de559deda6394029bc3aa13e1a5d7981f0da93681c3a750_2"
          },
          "properties": {}
        },
        {
          "ruleId": "93657ced-bc4b-3ca6-b65f-b63f098667c4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 53,
                  "endLine": 66,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                                    reinterpret_cast<{{kv_dtype}}*>(key_cache_ptr),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "af03f52e4b1f5f09b037a83d37b686fc704817ce8345655dd4cae11d1ee4a5a836e5e46d52a4de642de559deda6394029bc3aa13e1a5d7981f0da93681c3a750_3"
          },
          "properties": {}
        },
        {
          "ruleId": "164fa400-cee7-3da1-98fa-1f07f549cf12",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 53,
                  "endLine": 67,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                                    reinterpret_cast<{{kv_dtype}}*>(value_cache_ptr),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "af03f52e4b1f5f09b037a83d37b686fc704817ce8345655dd4cae11d1ee4a5a836e5e46d52a4de642de559deda6394029bc3aa13e1a5d7981f0da93681c3a750_4"
          },
          "properties": {}
        },
        {
          "ruleId": "0466a9da-8017-3c7d-994a-6ebebbd9a977",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 40,
                  "endLine": 86,
                  "endColumn": 120,
                  "snippet": {
                    "text": "    paged_attention_ll4mi_reduce_kernel<{{dtype}}, {{out_dtype}}, head_size, head_size, PARTITION_SIZE, {{npar_loops}}>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "af03f52e4b1f5f09b037a83d37b686fc704817ce8345655dd4cae11d1ee4a5a836e5e46d52a4de642de559deda6394029bc3aa13e1a5d7981f0da93681c3a750_5"
          },
          "properties": {}
        },
        {
          "ruleId": "6f66c08a-ab2d-3978-9d86-15b372ac356d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 95,
                  "endLine": 87,
                  "endColumn": 111,
                  "snippet": {
                    "text": "    <<<reduce_grid, reduce_block, 0, reinterpret_cast<hipStream_t>(stream)>>>(reinterpret_cast<{{out_dtype}}*>(out_ptr),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "af03f52e4b1f5f09b037a83d37b686fc704817ce8345655dd4cae11d1ee4a5a836e5e46d52a4de642de559deda6394029bc3aa13e1a5d7981f0da93681c3a750_6"
          },
          "properties": {}
        },
        {
          "ruleId": "8b4d6699-f6f5-3b28-9082-0ba4a88ae080",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 12,
                  "endLine": 126,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    func = compile(\n        gqa_ratio,\n        head_size,\n        npar_loops,\n        dtype,\n        kv_dtype,\n        kv_cache_dtype,\n        out_dtype,\n        block_size,\n        \"true\" if alibi_slopes is not None else \"false\",\n        mtp,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2168ea3b1999f83f50381a66f929e95ad19ea3fd81de86002af00ca5a42fcecf67b789670bc1527a64e3bd3371774c9739f518e5ba360a2713813d91b05cadf3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "902cc97f-b182-3e62-8680-375774fa4d07",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 5,
                  "endLine": 229,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    compile(**vars(args))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2168ea3b1999f83f50381a66f929e95ad19ea3fd81de86002af00ca5a42fcecf67b789670bc1527a64e3bd3371774c9739f518e5ba360a2713813d91b05cadf3_1"
          },
          "properties": {}
        },
        {
          "ruleId": "963b38f4-a05a-3c8a-b63e-12ea7e7f66f7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_ragged.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 25,
                  "endLine": 65,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        reinterpret_cast<{{dtype}}*>(max_logits_ptr + (num_seqs * num_heads * max_num_partitions));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5cce83797f193b9c9fbac0085806e8adb1ead36e473e627b9a6753ea1a9e6a6a16bbb2fa9d1067c7d4c62d76d1b4673ffe2c8b5c9f5741a8170e18f7f1de1264_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e1cda131-85e6-3272-bcd0-9ecfcab5728a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_ragged.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 44,
                  "endLine": 85,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    paged_attention_ll4mi_QKV_mfma16_kernel<{{dtype}},                       \n                                            {{kv_dtype}},                            \n                                            {% if fp8_kv_dtype == 'auto' %}\n                                            vllm::Fp8KVCacheDataType::kAuto,\n                                            {% else %}\n                                            vllm::Fp8KVCacheDataType::kFp8E4M3,\n                                            {% endif %}                 \n                                            {{block_size}},              \n                                            head_size,               \n                                            NTHR,                    \n                                            {{\"true\" if alibi_enabled else \"false\"}},          \n                                            gqa_ratio,\n                                            {{mtp}}>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5cce83797f193b9c9fbac0085806e8adb1ead36e473e627b9a6753ea1a9e6a6a16bbb2fa9d1067c7d4c62d76d1b4673ffe2c8b5c9f5741a8170e18f7f1de1264_1"
          },
          "properties": {}
        },
        {
          "ruleId": "8fd6ce8d-fe77-3d8a-9fdb-b725ba5c7203",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_ragged.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 81,
                  "endLine": 86,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    <<<grid, block, 0, reinterpret_cast<hipStream_t>(stream)>>>(reinterpret_cast<{{dtype}}*>(query_ptr),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5cce83797f193b9c9fbac0085806e8adb1ead36e473e627b9a6753ea1a9e6a6a16bbb2fa9d1067c7d4c62d76d1b4673ffe2c8b5c9f5741a8170e18f7f1de1264_2"
          },
          "properties": {}
        },
        {
          "ruleId": "9f20f984-c979-3b78-93d4-6af774343cb7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_ragged.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 53,
                  "endLine": 87,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                                    reinterpret_cast<{{kv_dtype}}*>(key_cache_ptr),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5cce83797f193b9c9fbac0085806e8adb1ead36e473e627b9a6753ea1a9e6a6a16bbb2fa9d1067c7d4c62d76d1b4673ffe2c8b5c9f5741a8170e18f7f1de1264_3"
          },
          "properties": {}
        },
        {
          "ruleId": "a9f46f1e-43c5-3223-9e07-c667af563899",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_ragged.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 53,
                  "endLine": 88,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                                    reinterpret_cast<{{kv_dtype}}*>(value_cache_ptr),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5cce83797f193b9c9fbac0085806e8adb1ead36e473e627b9a6753ea1a9e6a6a16bbb2fa9d1067c7d4c62d76d1b4673ffe2c8b5c9f5741a8170e18f7f1de1264_4"
          },
          "properties": {}
        },
        {
          "ruleId": "9ff3939b-5cd0-3393-b3c5-7001d838c850",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_ragged.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 40,
                  "endLine": 110,
                  "endColumn": 144,
                  "snippet": {
                    "text": "    paged_attention_ll4mi_reduce_kernel<{{dtype}}, {{out_dtype}}, head_size, head_size, PARTITION_SIZE, {{npar_loops}}, {{\"true\" if block_size>1 else \"false\"}}>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5cce83797f193b9c9fbac0085806e8adb1ead36e473e627b9a6753ea1a9e6a6a16bbb2fa9d1067c7d4c62d76d1b4673ffe2c8b5c9f5741a8170e18f7f1de1264_5"
          },
          "properties": {}
        },
        {
          "ruleId": "60bed482-76a2-3b1d-9bd3-f9b5483175f7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_ragged.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 95,
                  "endLine": 111,
                  "endColumn": 111,
                  "snippet": {
                    "text": "    <<<reduce_grid, reduce_block, 0, reinterpret_cast<hipStream_t>(stream)>>>(reinterpret_cast<{{out_dtype}}*>(out_ptr),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5cce83797f193b9c9fbac0085806e8adb1ead36e473e627b9a6753ea1a9e6a6a16bbb2fa9d1067c7d4c62d76d1b4673ffe2c8b5c9f5741a8170e18f7f1de1264_6"
          },
          "properties": {}
        },
        {
          "ruleId": "34afb94e-be60-388a-b0f3-342af58028d2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_ragged.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 12,
                  "endLine": 137,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    func = compile(\n        gqa_ratio,\n        head_size,\n        npar_loops,\n        dtype,\n        kv_dtype,\n        kv_cache_dtype,\n        out_dtype,\n        block_size,\n        alibi_slopes is not None,\n        partition_size,\n        mtp,\n        bool(logits_soft_cap),\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d88993e6feee54937d3831fa20cef651f545461965ced8138cd2a24ea7486ad2493b1427b8ed20860f21350a00607097268006e85ce74e8a6d8493e5c4f182b5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a17f807c-a146-324e-8b15-2365590f9a18",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_ragged.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 5,
                  "endLine": 245,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    compile(**vars(args))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d88993e6feee54937d3831fa20cef651f545461965ced8138cd2a24ea7486ad2493b1427b8ed20860f21350a00607097268006e85ce74e8a6d8493e5c4f182b5_1"
          },
          "properties": {}
        },
        {
          "ruleId": "689ef2a8-3fca-3577-add5-261e9e626b07",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_ragged_test.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 9,
                  "endLine": 66,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        hipMalloc(&ptr, size * sizeof(T));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b3db60bfd6b2fccc23a7992086daa9f41df9dc1991f735d25cea4a6738e7a46ab18e4a5ae7e319ffc74646428274a7cd0f05d4c2a3900f69b101581107267d08_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c492dd2d-3bfd-396c-af00-95b1a06aa239",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_v1.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 25,
                  "endLine": 70,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        reinterpret_cast<{{dtype}}*>(max_logits_ptr + (num_seqs * num_heads * max_num_partitions));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4e0fce404d1a36f1c335c76c62a25feb580fa9cc893dcb9c688e96a0ca34aadc04cbd3ffbbd1dc0f6358ed60047c24095faa86c69f01f698536954667cd6b8dc_0"
          },
          "properties": {}
        },
        {
          "ruleId": "88713006-c762-382c-a6e8-5a0a4f01d8a9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_v1.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 31,
                  "endLine": 72,
                  "endColumn": 110,
                  "snippet": {
                    "text": "    ck_tile::ComposedAttention<{{\"true\" if logits_soft_cap_enabled else \"false\"}} * ck_tile::LOGITS_SOFT_CAP> variant;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4e0fce404d1a36f1c335c76c62a25feb580fa9cc893dcb9c688e96a0ca34aadc04cbd3ffbbd1dc0f6358ed60047c24095faa86c69f01f698536954667cd6b8dc_1"
          },
          "properties": {}
        },
        {
          "ruleId": "e5e2d78c-1a61-3670-8ba6-eb903c30ff8c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_v1.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 44,
                  "endLine": 89,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    paged_attention_ll4mi_QKV_mfma16_kernel<{{dtype}},                       \n                                            {{kv_dtype}},\n                                            {% if fp8_kv_dtype == 'auto' %}\n                                            vllm::Fp8KVCacheDataType::kAuto,\n                                            {% else %}\n                                            vllm::Fp8KVCacheDataType::kFp8E4M3,\n                                            {% endif %}                                \n                                            {{block_size}},              \n                                            head_size,               \n                                            NTHR,                    \n                                            {{\"true\" if alibi_enabled else \"false\"}},           \n                                            gqa_ratio,\n                                            {{mtp}}>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4e0fce404d1a36f1c335c76c62a25feb580fa9cc893dcb9c688e96a0ca34aadc04cbd3ffbbd1dc0f6358ed60047c24095faa86c69f01f698536954667cd6b8dc_2"
          },
          "properties": {}
        },
        {
          "ruleId": "ab4475da-b55d-3f85-af44-e055ddc16662",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_v1.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 81,
                  "endLine": 90,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    <<<grid, block, 0, reinterpret_cast<hipStream_t>(stream)>>>(reinterpret_cast<{{dtype}}*>(query_ptr),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4e0fce404d1a36f1c335c76c62a25feb580fa9cc893dcb9c688e96a0ca34aadc04cbd3ffbbd1dc0f6358ed60047c24095faa86c69f01f698536954667cd6b8dc_3"
          },
          "properties": {}
        },
        {
          "ruleId": "49c99b47-f823-3a7c-9de0-9d49e79da051",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_v1.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 53,
                  "endLine": 91,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                                    reinterpret_cast<{{kv_dtype}}*>(key_cache_ptr),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4e0fce404d1a36f1c335c76c62a25feb580fa9cc893dcb9c688e96a0ca34aadc04cbd3ffbbd1dc0f6358ed60047c24095faa86c69f01f698536954667cd6b8dc_4"
          },
          "properties": {}
        },
        {
          "ruleId": "34d0ffe5-3cba-3afc-a266-b9444587120f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_v1.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 53,
                  "endLine": 92,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                                    reinterpret_cast<{{kv_dtype}}*>(value_cache_ptr),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4e0fce404d1a36f1c335c76c62a25feb580fa9cc893dcb9c688e96a0ca34aadc04cbd3ffbbd1dc0f6358ed60047c24095faa86c69f01f698536954667cd6b8dc_5"
          },
          "properties": {}
        },
        {
          "ruleId": "d879694a-2125-312c-80e2-d2f8812ded4c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_v1.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 40,
                  "endLine": 115,
                  "endColumn": 120,
                  "snippet": {
                    "text": "    paged_attention_ll4mi_reduce_kernel<{{dtype}}, {{out_dtype}}, head_size, head_size, PARTITION_SIZE, {{npar_loops}}>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4e0fce404d1a36f1c335c76c62a25feb580fa9cc893dcb9c688e96a0ca34aadc04cbd3ffbbd1dc0f6358ed60047c24095faa86c69f01f698536954667cd6b8dc_6"
          },
          "properties": {}
        },
        {
          "ruleId": "09a951fe-b0ba-360d-a42c-555ffa090405",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected template variable interpolation in an HTML tag.\nThis is potentially vulnerable to cross-site scripting (XSS)\nattacks because a malicious actor has control over HTML\nbut without the need to use escaped characters. Use explicit\ntags instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_v1.cpp.jinja",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 95,
                  "endLine": 116,
                  "endColumn": 111,
                  "snippet": {
                    "text": "    <<<reduce_grid, reduce_block, 0, reinterpret_cast<hipStream_t>(stream)>>>(reinterpret_cast<{{out_dtype}}*>(out_ptr),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4e0fce404d1a36f1c335c76c62a25feb580fa9cc893dcb9c688e96a0ca34aadc04cbd3ffbbd1dc0f6358ed60047c24095faa86c69f01f698536954667cd6b8dc_7"
          },
          "properties": {}
        },
        {
          "ruleId": "c5746d28-da83-3587-9ce5-6e9b54c9484d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_v1.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 12,
                  "endLine": 140,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    func = compile(\n        gqa_ratio,\n        head_size,\n        npar_loops,\n        dtype,\n        kv_dtype,\n        kv_cache_dtype,\n        out_dtype,\n        block_size,\n        alibi_enabled,\n        logits_soft_cap_enabled,\n        partition_size,\n        mtp,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "317b979776304bd0afd6da222a271bd9d061ca48beddfc6420c75eb7e1935a321830826ea237a0a1e1feba7d2dd7b604773787a6a07adfab2044288cb9c5f7f0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "211e5678-f705-3959-a4ed-88a44377f80b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/pa/pa_v1.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 5,
                  "endLine": 255,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    compile(**vars(args))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "317b979776304bd0afd6da222a271bd9d061ca48beddfc6420c75eb7e1935a321830826ea237a0a1e1feba7d2dd7b604773787a6a07adfab2044288cb9c5f7f0_1"
          },
          "properties": {}
        },
        {
          "ruleId": "04601aab-6cde-3797-ae1c-4337f64d13a6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/sampling/top_k_renorm_probs.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 12,
                  "endLine": 52,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    func = compile(vocab_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c6e604cb28f66d83f9065a1e08b9ccecdd02ce5448087805e428058a63d28a724817f54218971540b9ad791055829b9fb41dcaa406b73cfefaef6b71391c44a4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3124cfb4-90d3-3883-8d6e-9cb55c2f7090",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/sampling/top_k_renorm_probs.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 5,
                  "endLine": 86,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    compile(**vars(args))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c6e604cb28f66d83f9065a1e08b9ccecdd02ce5448087805e428058a63d28a724817f54218971540b9ad791055829b9fb41dcaa406b73cfefaef6b71391c44a4_1"
          },
          "properties": {}
        },
        {
          "ruleId": "e8c1cc71-a8d3-3e13-b70a-18eea4267ea5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/sampling/top_k_top_p_sampling_from_probs.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 12,
                  "endLine": 65,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    func = compile(vocab_size, deterministic)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "63359d6a037fcc72b9bd07be88339f9b1edb19195258e73e966be77296e262b995c6e9bb58cd9c794a3ead5adfd2b084ce37288b57e8b1dd5f0fe7eb0999a94e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3d291ae8-e50b-37f8-8265-9c1fd7aee9ad",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/sampling/top_k_top_p_sampling_from_probs.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 5,
                  "endLine": 115,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    compile(**vars(args))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "63359d6a037fcc72b9bd07be88339f9b1edb19195258e73e966be77296e262b995c6e9bb58cd9c794a3ead5adfd2b084ce37288b57e8b1dd5f0fe7eb0999a94e_1"
          },
          "properties": {}
        },
        {
          "ruleId": "fd131cce-06e7-35bc-a8a5-55e7ce77ee9a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/sampling/top_p_sampling_from_probs.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 12,
                  "endLine": 61,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    func = compile(vocab_size, deterministic)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fa5106bcfdb37c52be05b7b5bafbe09412ba0169584d92ffb4d7bfd7205c84c6fa49822f042ad8c7a99ed3645338c9052a27ea840fb84cb75f72672a3164dcbf_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d6d26758-b5b6-3d0f-be36-61624bb51dc6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'compile' function is not secure against maliciously constructed input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/sampling/top_p_sampling_from_probs.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 5,
                  "endLine": 105,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    compile(**vars(args))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fa5106bcfdb37c52be05b7b5bafbe09412ba0169584d92ffb4d7bfd7205c84c6fa49822f042ad8c7a99ed3645338c9052a27ea840fb84cb75f72672a3164dcbf_1"
          },
          "properties": {}
        },
        {
          "ruleId": "9fcfccad-b38a-32d3-8182-eb87efd0e827",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/utils.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 33,
                  "endLine": 27,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    auto AITER_MAX_CACHE_SIZE = getenv(\"AITER_MAX_CACHE_SIZE\");"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4c790b56f50fc3aec665f7eeae053928b5054c042fbea89c85b45253be1909adcd1fed88d1969ea242a19aa282aea2aac95c702a12bcf9d4785b8c3194304147_0"
          },
          "properties": {}
        },
        {
          "ruleId": "041fa3f3-2dae-32d4-8b61-30a5ca74ed16",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid the 'ato*()' family of functions. Their use can lead to undefined\nbehavior, integer overflows, and lack of appropriate error handling. Instead\nprefer the 'strtol*()' family of functions.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/utils.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 32,
                  "endLine": 31,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    int aiter_max_cache_size = atoi(AITER_MAX_CACHE_SIZE);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b6dce7817b45aa2dade3c745ddd1ef77bf27cebe1e87b1a70621d41c1158a79ab67b13cd40876747c5cb660ab549723396b9c24f4dd9570a092d530506e8702a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "06484843-4c09-3224-a95e-2cdde13a9150",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/utils.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 18,
                  "endLine": 56,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    FILE* pipe = popen(cmd.c_str(), \"r\");"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "90490a1a33144e502c5e74e3a572acfb21607719c1a47bb4b3c03a29d6424b1b2fb5cb60898bca6899e6e19a9fdb31aa05353aa49b0cf34c124a5248d5651891_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4728fcb9-f1ac-3931-853e-20e413a79813",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/utils.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 16,
                  "endLine": 63,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        while (fgets(buffer.data(), buffer.size(), pipe) != nullptr) {"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "68622259b8ea6a430045e34cabb12d1134df15a242b3d8fb83a59e6c5d5bb3db69142448b58f41499ac585016b50d743b5de528e49d95b162c6046b0f240ae84_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b819e8ef-7aab-3e87-8c5b-5538a0b4a5d7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/utils.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 18,
                  "endLine": 95,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        handle = dlopen(path.c_str(), RTLD_LAZY);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "66aa3a194bcebcf0508dc5f0d2d2e9416c796d82d7becf7edf9404e2a7b4b2702896da74529f95dda485995186e64072bd7822f69e781fc43862738d01108e54_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e9280495-f31a-3502-8869-79e45c8c0148",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'subprocess' module called with 'shell=True' may allow for shell injection"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 5,
                  "endLine": 28,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    subprocess.run(\n        \"/opt/rocm/llvm/bin/amdgpu-arch\", shell=True, capture_output=True, text=True\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a2f5dea9ef31eb25972b7fc73fd9507296e00436ec5c042b1048867dfd3e52c22f90369ba060de3ab1795bd49f28089279bb396020530e5d6af39ddde3d82c44_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3009fd4a-9e18-3ae0-a3f0-ffc5fffd40cc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'subprocess' module called with 'shell=True' may allow for shell injection"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 15,
                  "endLine": 96,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    version = subprocess.run(\n        \"/opt/rocm/bin/hipconfig --version\", shell=True, capture_output=True, text=True\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a2f5dea9ef31eb25972b7fc73fd9507296e00436ec5c042b1048867dfd3e52c22f90369ba060de3ab1795bd49f28089279bb396020530e5d6af39ddde3d82c44_1"
          },
          "properties": {}
        },
        {
          "ruleId": "e0d28914-060f-3564-8e8c-eaaf618b6735",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 25,
                  "endLine": 197,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        makefile_file = makefile_template.render(\n            includes=[f\"-I{include_dir}\"], sources=sources, cxxflags=cxxflags\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7a2a466a18a7c5939dd5513d48da522b096b3be0615137f1ab869c5abc844151647aef53a701450c5b06048c438e49bf61f6e271539ee3228583643351b670c2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fff74b80-4d4e-382c-bb5b-dd660500540f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "csrc/cpp_itfs/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 12,
                  "endLine": 225,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    return hashlib.md5(signature.encode(\"utf-8\")).hexdigest()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5d1b53158721530f1ddfa68ea6a4caceed15ea4f270c6fee067d4708844e537c3812b309db5b94a8162019b08122bcd93e95a7074ef387330ece7ab55041c49e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6a7fa310-6fcd-3a5d-9910-c8bedab729aa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gradlib/gradlib/gemm_tuner.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 13,
                  "endLine": 175,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c3a50f2bb7db14f729355eb6612f34c8a8090d0516142225c73d2d870bc145d8d61daa8009ea3a37bc260a67094376f6130de99653c46d33e5d9671eaf5a22de_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4a5eeadd-acd8-3cac-9528-71d449350071",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hsa/gfx942/fmoe_2stages/tune.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 17,
                  "endLine": 218,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        dtype = eval(dtype)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "525709d4f04b97ac68a837947188c1cd1a1ad50df5ce5c0a4d7fde12b3fbf0465de2bbd0b3c61a4866267417ad44cd5847fa2b8e1cffc2968938e917dedb3988_0"
          },
          "properties": {}
        },
        {
          "ruleId": "12240d01-9797-3ecc-a767-7c38ea4e1060",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hsa/gfx942/fmoe_2stages/tune.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 21,
                  "endLine": 219,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        q_dtype_a = eval(q_dtype_a)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "525709d4f04b97ac68a837947188c1cd1a1ad50df5ce5c0a4d7fde12b3fbf0465de2bbd0b3c61a4866267417ad44cd5847fa2b8e1cffc2968938e917dedb3988_1"
          },
          "properties": {}
        },
        {
          "ruleId": "069b18a2-d5e6-39c8-a483-b61bbf452599",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hsa/gfx942/fmoe_2stages/tune.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 21,
                  "endLine": 220,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        q_dtype_w = eval(q_dtype_w)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "525709d4f04b97ac68a837947188c1cd1a1ad50df5ce5c0a4d7fde12b3fbf0465de2bbd0b3c61a4866267417ad44cd5847fa2b8e1cffc2968938e917dedb3988_2"
          },
          "properties": {}
        },
        {
          "ruleId": "7e933993-93f2-306b-9572-b58196c3fb24",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hsa/gfx942/fmoe_2stages/tune.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 18,
                  "endLine": 221,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        q_type = eval(q_type)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "525709d4f04b97ac68a837947188c1cd1a1ad50df5ce5c0a4d7fde12b3fbf0465de2bbd0b3c61a4866267417ad44cd5847fa2b8e1cffc2968938e917dedb3988_3"
          },
          "properties": {}
        },
        {
          "ruleId": "7b39d882-12fe-30f4-837b-cd1d190dd0b3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hsa/gfx942/fmoe_2stages/tune.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 20,
                  "endLine": 227,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        act_type = eval(act_type)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "525709d4f04b97ac68a837947188c1cd1a1ad50df5ce5c0a4d7fde12b3fbf0465de2bbd0b3c61a4866267417ad44cd5847fa2b8e1cffc2968938e917dedb3988_4"
          },
          "properties": {}
        },
        {
          "ruleId": "4403d62a-c322-3135-9448-032cc90207a6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "op_tests/multigpu_tests/test_dispatch_combine.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 24,
                  "endLine": 354,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        quant_types = [eval(f\"aiter.QuantType.{args.quant_type}\")]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6bdc50b5dfca9a3902419baaaf86a9d5a2c872364b593fb75f8f1749cde311e7812beed65298cec2baceaa9362a3af862a5a312421ca8f2205199717ac5f0c19_0"
          },
          "properties": {}
        },
        {
          "ruleId": "617e498f-f8e1-3764-ade4-0f9362300105",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"Autotuning kernel\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "op_tests/op_benchmarks/triton/utils/benchmark_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 12,
                  "endLine": 301,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        if re.search(r\"Autotuning kernel\", line):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c1c2dd89daa9b4bd69f3b22b3073d9e32133035d03e60e136cd9cecd25724db55a7f435de96da356b4796da4e1c7562d6a93b7d323c461271acc8c110b3f2589_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1402ef3a-9aca-30a9-9521-7bd1d2392392",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"Triton autotuning for function\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "op_tests/op_benchmarks/triton/utils/benchmark_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 12,
                  "endLine": 303,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        if re.search(r\"Triton autotuning for function\", line):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8db5413e1154bc131c5c517d6a71b674dcdd8eedbdbb8368c6bb9639768c75e30deb3a5640bc55293fc7f52099457d9a12811f6126ae9aeee87f97db0b4a1cd8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3901513a-b0ef-3be6-8b5c-7d5a48169c89",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\.name:\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "op_tests/op_benchmarks/triton/utils/benchmark_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 12,
                  "endLine": 306,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        if re.search(r\"\\.name:\", line):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a9f3b17a221dd69090b7d24b86357d38c951e575a43dcc38103711cd2928281a7469c61f0bf310c6bca75d7f11189730e71c291175bc7be6e35b4975c4452a93_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a4bddb2c-9e15-3872-af5a-a812a3ff465b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `rf\"^\\s*{table_start}\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "op_tests/op_benchmarks/triton/utils/benchmark_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 12,
                  "endLine": 311,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        if re.match(rf\"^\\s*{table_start}\", line):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5b347ca20c9ddc2d1b340a69701e86b62a4f7391e02b9b243d0f512b50a78b5e12a345ba8223b0fd362dc9a7faa5cc33488631b2470dccae3414aa0423a2222b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6f300418-468a-3f0e-b12b-86da5626aa99",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\" {1,}\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "op_tests/op_benchmarks/triton/utils/benchmark_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 25,
                  "endLine": 320,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    table.field_names = re.split(r\" {1,}\", table_lines[0].strip())"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "227a6e582bee1db2dad49fe8ff85654a47034a575c67535489aa6ae6ccd359a7cfe73172681357ce60dde5a0fceccd0c2fad4df6ab3d2f74cb8e7392ed163736_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c88c0981-64ec-32a1-930b-0cc4cc9d2ac4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Using 'temp_file.name' without '.flush()' or '.close()' may cause an error because the file may not exist when 'temp_file.name' is used. Use '.flush()' or close the file before using 'temp_file.name'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "op_tests/op_benchmarks/triton/utils/benchmark_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 23,
                  "endLine": 329,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        output_file = temp_file.name"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "52f189c036ff545f61fc0a59c9828175701aa0bbf80d2c3740923e7d9dc89ed3380c3dda996a076d30f7bb4469a7a045bf51cbeab293b9c790145a09767e0e5b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a0d4e265-faac-39c9-a82d-835370fbbb69",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "op_tests/op_benchmarks/triton/utils/benchmark_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 5,
                  "endLine": 347,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    time.sleep(0.5)  # Ensure everything is written before reading"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0aa02431b5937794fbb9838fab71df1227271f5adee5fbb03c66c8c4b591bbbe736f5af44b7947ab37a29cbda24fb8283ae4fd3a2c1b07120c0ab530dd1ecfea_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6dfcb85c-03a8-3cd8-b9b5-9d4de93d9502",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function test_reshape_and_cache mutates default dict quantCfg. Python only instantiates default function arguments once and shares the instance across the function calls. If the default function argument is mutated, that will modify the instance used by all future function calls. This can cause unexpected results, or lead to security vulnerabilities whereby one function consumer can view or modify the data of another function consumer. Instead, use a default argument (like None) to indicate that no argument was provided and instantiate a new dictionary at that time. For example: `if quantCfg is None: quantCfg = {}`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "op_tests/test_kvcache.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 1,
                  "endLine": 261,
                  "endColumn": 6,
                  "snippet": {
                    "text": "def test_reshape_and_cache(\n    ctx_lens: int,\n    bs: int,\n    num_heads: Tuple[int, int],\n    head_size: int,\n    block_size: int,\n    DTyoe_KV: torch.dtype,\n    DTyoe_KVCache: torch.dtype,\n    quantCfg: dict = {},\n):\n    asm_layout = True\n    qhead, kvhead = num_heads\n    num_blocks = (MAX_TOKEN_SUPPORTED + block_size - 1) // block_size\n    # num_blocks = (ctx_lens+1+block_size-1)//block_size\n    max_token_num_support = num_blocks * block_size\n    x = 16 // DTyoe_KVCache.itemsize\n    if asm_layout:\n        k_cache_shape = (bs * num_blocks, kvhead, head_size // x, block_size, x)\n        v_cache_shape = (bs * num_blocks, kvhead, block_size // x, head_size, x)\n        kv_scale_shape = (bs * num_blocks, kvhead, block_size)\n    else:\n        k_cache_shape = (bs * num_blocks, kvhead, head_size // x, block_size, x)\n        v_cache_shape = (bs * num_blocks, kvhead, head_size, block_size)\n        kv_scale_shape = (kvhead, bs * max_token_num_support)\n\n    # ##################################################### prefill part\n    qkv = torch.randn(\n        bs * ctx_lens, qhead + 2 * kvhead, head_size, dtype=DTyoe_KV, device=\"cuda\"\n    )\n    _, key, value = torch.split(qkv, [qhead, kvhead, kvhead], dim=1)\n    device = key.device\n    k_cache = torch.empty(k_cache_shape, dtype=DTyoe_KVCache, device=device)\n    v_cache = torch.empty(v_cache_shape, dtype=DTyoe_KVCache, device=device)\n    if quantCfg:\n        k_scale = torch.empty(kv_scale_shape, device=key.device)\n        v_scale = torch.empty_like(k_scale)\n        quantCfg[\"k_scale\"] = k_scale.clone()\n        quantCfg[\"v_scale\"] = v_scale.clone()\n    slot_mapping = torch.tensor(\n        [\n            bsID * max_token_num_support + i\n            for bsID in range(bs)\n            for i in range(ctx_lens)\n        ]\n    ).cuda()\n\n    k_cache_ref = k_cache.clone()\n    v_cache_ref = v_cache.clone()\n    out_ref, us_ref = run_torch(\n        key.view(bs, ctx_lens, kvhead, head_size),\n        value.view(bs, ctx_lens, kvhead, head_size),\n        k_cache_ref,\n        v_cache_ref,\n        slot_mapping,\n        block_size,\n        x,\n        asm_layout,\n        quantCfg,\n    )\n\n    k_cache_a = k_cache.clone()\n    v_cache_a = v_cache.clone()\n    if quantCfg:\n        quantCfg[\"k_scale\"] = k_scale.clone()\n        quantCfg[\"v_scale\"] = v_scale.clone()\n    out_a, us_a = run_aiter(\n        key,\n        value,\n        k_cache_a,\n        v_cache_a,\n        slot_mapping,\n        block_size,\n        x,\n        asm_layout,\n        quantCfg,\n    )\n\n    print(f\"prefill part: ref vs aiter {us_ref:>8.2f}us vs {us_a:>8.2f}us\")\n    names = [\"k_cache\", \"v_cache\", \"k_scale\", \"v_scale\"]\n    for i, el in enumerate(out_ref):\n        if el is None:\n            continue\n        checkAllclose(\n            el.to(dtypes.fp32),\n            out_a[i].to(dtypes.fp32),\n            msg=f\"{names[i]} {el.shape}\",\n        )\n\n    # ##################################################### decode part\n    qkv = torch.randn(bs, qhead + 2 * kvhead, head_size, dtype=DTyoe_KV, device=\"cuda\")\n    _, key, value = torch.split(qkv, [qhead, kvhead, kvhead], dim=1)\n\n    if quantCfg:\n        quantCfg[\"k_scale\"] = k_scale.clone()\n        quantCfg[\"v_scale\"] = v_scale.clone()\n    slot_mapping = torch.tensor(\n        [bsID * max_token_num_support + ctx_lens for bsID in range(bs)]\n    ).cuda()\n\n    k_cache_ref = k_cache.clone()\n    v_cache_ref = v_cache.clone()\n    out_ref, us_ref = run_torch(\n        key.view(bs, 1, kvhead, head_size),\n        value.view(bs, 1, kvhead, head_size),\n        k_cache_ref,\n        v_cache_ref,\n        slot_mapping,\n        block_size,\n        x,\n        asm_layout,\n        quantCfg,\n    )\n\n    k_cache_a = k_cache.clone()\n    v_cache_a = v_cache.clone()\n    if quantCfg:\n        quantCfg[\"k_scale\"] = k_scale.clone()\n        quantCfg[\"v_scale\"] = v_scale.clone()\n    out_a, us_a = run_aiter(\n        key,\n        value,\n        k_cache_a,\n        v_cache_a,\n        slot_mapping,\n        block_size,\n        x,\n        asm_layout,\n        quantCfg,\n    )\n\n    print(f\"decode part: ref vs aiter {us_ref:>8.2f}us vs {us_a:>8.2f}us\")\n    names = [\"k_cache\", \"v_cache\", \"k_scale\", \"v_scale\"]\n    for i, el in enumerate(out_ref):\n        if el is None:\n            continue\n        checkAllclose(\n            el.to(dtypes.fp32),\n            out_a[i].to(dtypes.fp32),\n            msg=f\"{names[i]} {el.shape}\",\n        )\n    print(\n        f\"finish test {ctx_lens=} {bs=} {num_heads=} {head_size=} {block_size=} {DTyoe_KV=} {DTyoe_KVCache=}\"\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "78d297c93bad1295b9a7e87aef0bc8a5a3dc7681b75c38e129e51621169a72ce6390388b417135744b5a1d3e39c13d3a03cecff884b6ba66eb86df35b8595fe8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4250acb9-dc19-3aa2-8ebf-bba3a8629f30",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'test_persistent_lean_attention' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "op_tests/triton_tests/test_la.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 1,
                  "endLine": 249,
                  "endColumn": 70,
                  "snippet": {
                    "text": "@pytest.mark.parametrize(\n    \"causal, batch, h, n_ctx_q, n_ctx, d, total_programs, init_dtype, BLOCK_M, BLOCK_N, waves_per_eu, num_warps \",\n    [\n        (False, 2, 64, 128, [65536, 65536], 128, 304, torch.float16, 128, 64, 1, 4),\n        (False, 2, 64, 16, [65536, 65536], 128, 912, torch.float16, 16, 128, 3, 4),\n        (False, 1, 64, 16, [131072], 128, 912, torch.float16, 16, 128, 2, 4),\n        (False, 1, 64, 16, [262144], 64, 912, torch.float16, 16, 64, 2, 4),\n        (False, 1, 64, 16, [524288], 64, 912, torch.float16, 16, 64, 2, 4),\n        (False, 2, 96, 16, [32768, 32768], 128, 912, torch.float16, 16, 128, 2, 4),\n        (False, 1, 96, 16, [65536], 128, 912, torch.float16, 16, 128, 2, 4),\n        (False, 1, 96, 16, [131072], 128, 912, torch.float16, 16, 128, 2, 4),\n        (False, 1, 96, 16, [262144], 64, 912, torch.float16, 16, 64, 2, 4),\n        (False, 1, 96, 16, [524288], 16, 912, torch.float16, 16, 256, 1, 4),  #\n        (False, 1, 96, 16, [1048576], 16, 912, torch.float16, 16, 256, 1, 4),  #\n        (False, 1, 128, 16, [32768], 128, 912, torch.float16, 16, 128, 2, 4),\n        (False, 1, 128, 16, [65536], 128, 912, torch.float16, 16, 128, 2, 4),\n        (False, 1, 128, 16, [131072], 128, 912, torch.float16, 16, 128, 2, 4),\n        (False, 1, 128, 16, [262144], 64, 912, torch.float16, 16, 64, 2, 4),\n        (False, 1, 128, 16, [524288], 16, 912, torch.float16, 16, 256, 1, 4),  #\n        (\n            False,\n            3,\n            64,\n            16,\n            [4096, 32768, 65536],\n            128,\n            912,\n            torch.float16,\n            16,\n            128,\n            2,\n            4,\n        ),\n        (\n            False,\n            8,\n            64,\n            16,\n            [1024, 1024, 2048, 2048, 4096, 4096, 32768, 65536],\n            128,\n            912,\n            torch.float16,\n            16,\n            64,\n            2,\n            4,\n        ),\n        (\n            True,\n            1,\n            64,\n            8192,\n            [8192],\n            128,\n            304,\n            torch.float16,\n            128,\n            64,\n            2,\n            4,\n        ),  # Causal=1,\n        (True, 2, 64, 2048, [2048, 2048], 128, 304, torch.float16, 128, 64, 2, 4),\n        # These test cases fail:\n        # (True, 2, 64, 2048, [2048, 2048], 128, 304, torch.float16, 128, 64, 2, 4),\n        # (True, 1, 64, 4096, [4096], 128, 304, torch.float16, 128, 16, 3, 4),\n        # (False, 1, 64, 4096, [4096], 128, 304, torch.float16, 128, 16, 3, 4),\n    ],\n)\ndef test_persistent_lean_attention(\n    request,\n    batch,\n    h,\n    n_ctx_q,\n    n_ctx,\n    d,\n    total_programs,\n    init_dtype,\n    BLOCK_M,\n    BLOCK_N,\n    waves_per_eu,\n    num_warps,\n    causal,\n):\n    torch.cuda.empty_cache()  # Helps avoid hangs in large tests\n\n    torch.manual_seed(20)\n    # Long seqlen (>512K) can hit memory access fault. Suspect compiler issue\n    # WA with shorter d and longer BLOCK_N\n    if any(item > 524288 for item in n_ctx):\n        BLOCK_N = 256\n        d = 16\n\n    assert batch == len(n_ctx)\n    try:\n        sum_n_ctx = sum(int(n) for n in n_ctx)\n    except ValueError:\n        print(f\"N_CTX contains non-numeric values: {n_ctx}\")\n\n    # N_CTX is a list of context lengthes for all the req in a batch\n    # First, calculate #BLOCK_N for each context length \"list_num_block_n\"\n    # Second, Convert it to a list of assumulative lengthes \"list_sum_block_n\"\n    # Third, convert list to a tensor \"batch_num_block_n\"\n    for s in n_ctx:\n        # print(f\"s={s}\")\n        list_num_block_n = [\n            (int(str(s).strip()) + BLOCK_N - 1) // BLOCK_N for s in n_ctx\n        ]\n    len_sum = 0\n    list_sum_block_n = []\n    for i in range(batch):\n        len_sum += list_num_block_n[i]\n        list_sum_block_n.append(len_sum)\n    batch_num_block_n = torch.tensor(list_sum_block_n, device=\"cuda\", dtype=torch.int32)\n\n    sm_scale = 0.5\n\n    q, k, v, Mp, Lp, Op, locks, batch_num_block_n = get_lean_attn_inputs(\n        batch,\n        n_ctx_q,\n        n_ctx,\n        BLOCK_N,\n        h,\n        d,\n        total_programs,\n        init_dtype,\n    )\n\n    # Triton LeanAttention output\n    la_out, ms = _persistent_lean_attention(\n        q,\n        k,\n        v,\n        Mp,\n        Lp,\n        Op,\n        locks,\n        batch_num_block_n,\n        total_programs,\n        BLOCK_M,\n        BLOCK_N,\n        causal,\n        batch,\n        sm_scale,\n        num_warps,\n        waves_per_eu,\n    )\n\n    # Calculate Pytorch refence output\n    ref_out = reference_attention(q, k, v, n_ctx, n_ctx_q, sm_scale, causal)\n    # Compare result\n    atol = 1.4e-1 if init_dtype == \"fp8\" else 1e-2\n    rtol = 1e-2 if init_dtype == \"fp8\" else 3e-3\n    torch.testing.assert_close(ref_out, la_out, atol=atol, rtol=rtol)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "99d18b5c86f0461da1d4aef4938d9e2c2cfed9ec81c8fa92f5bbe6d16e86a10e1cac05ddce90cf7e3a63f2da7bc38c21a6fd5dd3880f77013657e4b8b0795562_0"
          },
          "properties": {}
        },
        {
          "ruleId": "122402ff-bfa4-37b3-9914-8dfa24fd1c23",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'test_persistent_lean_attention' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "op_tests/triton_tests/test_la_paged.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 197,
                  "endColumn": 70,
                  "snippet": {
                    "text": "@pytest.mark.parametrize(\n    \"batch, h, n_ctx_q, n_ctx, d, total_programs, init_dtype, BLOCK_M, BLOCK_N, waves_per_eu, num_warps \",\n    [\n        (1, 64, 16, [65536], 64, 912, torch.float16, 16, 64, 2, 4),\n        (1, 64, 16, [131072], 64, 912, torch.float16, 16, 64, 2, 4),\n        (1, 64, 16, [262144], 64, 912, torch.float16, 16, 64, 2, 4),\n        (1, 64, 16, [524288], 64, 912, torch.float16, 16, 64, 2, 4),\n        (1, 96, 16, [32768], 64, 912, torch.float16, 16, 64, 2, 4),\n        (1, 96, 16, [65536], 64, 912, torch.float16, 16, 64, 2, 4),\n        (1, 96, 16, [131072], 64, 912, torch.float16, 16, 64, 2, 4),\n        (1, 96, 16, [262144], 64, 912, torch.float16, 16, 64, 2, 4),\n        (1, 96, 16, [524288], 16, 912, torch.float16, 16, 256, 1, 4),  #\n        (1, 96, 16, [1048576], 16, 912, torch.float16, 16, 256, 1, 4),  #\n        (1, 128, 16, [32768], 64, 912, torch.float16, 16, 64, 2, 4),\n        (1, 128, 16, [65536], 64, 912, torch.float16, 16, 64, 2, 4),\n        (1, 128, 16, [131072], 64, 912, torch.float16, 16, 64, 2, 4),\n        (1, 128, 16, [262144], 64, 912, torch.float16, 16, 64, 2, 4),\n        (1, 128, 16, [524288], 16, 912, torch.float16, 16, 256, 1, 4),  #\n        (3, 64, 16, [4096, 32768, 65536], 64, 912, torch.float16, 16, 64, 2, 4),\n        (\n            8,\n            64,\n            16,\n            [1024, 1024, 2048, 2048, 4096, 4096, 32768, 65536],\n            64,\n            912,\n            torch.float16,\n            16,\n            64,\n            2,\n            4,\n        ),\n    ],\n)\ndef test_persistent_lean_attention(\n    request,\n    batch,\n    h,\n    n_ctx_q,\n    n_ctx,\n    d,\n    total_programs,\n    init_dtype,\n    BLOCK_M,\n    BLOCK_N,\n    waves_per_eu,\n    num_warps,\n):\n    torch.cuda.empty_cache()  # Helps avoid hangs in large tests\n\n    torch.manual_seed(20)\n    # Long seqlen (>512K) can hit memory access fault. Suspect compiler issue\n    # WA with shorter d and longer BLOCK_N\n    if any(item > 524288 for item in n_ctx):\n        BLOCK_N = 256\n        d = 16\n\n    assert batch == len(n_ctx)\n\n    try:\n        sum_n_ctx = sum(int(n) for n in n_ctx)\n    except ValueError:\n        print(f\"N_CTX contains non-numeric values: {n_ctx}\")\n\n    # N_CTX is a list of context lengthes for all the req in a batch\n    # First, calculate #BLOCK_N for each context length \"list_num_block_n\"\n    # Second, Convert it to a list of assumulative lengthes \"list_sum_block_n\"\n    # Third, convert list to a tensor \"batch_num_block_n\"\n    for s in n_ctx:\n        # print(f\"s={s}\")\n        list_num_block_n = [\n            (int(str(s).strip()) + BLOCK_N - 1) // BLOCK_N for s in n_ctx\n        ]\n    len_sum = 0\n    list_sum_block_n = []\n    for i in range(batch):\n        len_sum += list_num_block_n[i]\n        list_sum_block_n.append(len_sum)\n    batch_num_block_n = torch.tensor(list_sum_block_n, device=\"cuda\", dtype=torch.int32)\n\n    sm_scale = 0.5\n\n    # Allocate Tensors\n    q = torch.empty((h, n_ctx_q * batch, d), dtype=init_dtype, device=\"cuda\").normal_(\n        mean=0.0, std=0.5\n    )\n    k = torch.empty((h, sum_n_ctx, d), dtype=init_dtype, device=\"cuda\").normal_(\n        mean=0.0, std=0.5\n    )\n    v = torch.empty((h, sum_n_ctx, d), dtype=init_dtype, device=\"cuda\").normal_(\n        mean=0.0, std=0.5\n    )\n\n    print(f\"Q shape={q.shape}\")\n    print(f\"K shape={k.shape}\")\n    print(f\"V shape={v.shape}\")\n    torch.set_printoptions(threshold=10000)\n\n    block_tables = []  # kv block tables used by lean attention\n    ref_block_tables = []  # kv block tables used to compute reference results\n    num_kv_blocks = sum_n_ctx // BLOCK_N + (1 if (sum_n_ctx % BLOCK_N != 0) else 0)\n    kv_n_ctx = []\n    last = 0\n    for s in n_ctx:\n        kv_blocks = s // BLOCK_N + (1 if (s % BLOCK_N != 0) else 0)\n        last += kv_blocks\n        kv_n_ctx.append(last)\n\n    for head in range(h):\n        ref_b = []\n        ref_b_ctx = []\n        kv_n_ctx_idx = 0\n\n        r = random.sample(range(0, num_kv_blocks), num_kv_blocks)\n        for i in range(num_kv_blocks):\n            ref_b.append(r[i])\n            if i == kv_n_ctx[kv_n_ctx_idx] - 1:\n                ref_b_ctx.append(ref_b)\n                ref_b = []\n                kv_n_ctx_idx += 1\n        block_tables.append(r)\n        ref_block_tables.append(ref_b_ctx)\n    kv_block_tables = torch.tensor(block_tables, dtype=torch.int32, device=\"cuda\")\n\n    # LeanAttention Specific Parameters\n    Mp = torch.empty((total_programs, n_ctx_q), device=q.device, dtype=torch.float32)\n    Lp = torch.empty((total_programs, n_ctx_q), device=q.device, dtype=torch.float32)\n    Op = torch.empty((total_programs, n_ctx_q, d), device=q.device, dtype=torch.float32)\n\n    locks = torch.zeros((total_programs,), device=q.device, dtype=torch.int32)\n\n    # Calculate Pytorch refence output\n    start = 0\n    start_q = 0\n    ref_out = torch.empty_like(q, dtype=v.dtype)\n    # qb = torch.empty((h, n_ctx_q*batch, d), dtype=init_dtype)\n    for h in range(h):\n        for b in range(len(n_ctx)):\n            # print(f\"h={h}\")\n            # print(f\"n_ctx_q={N_CTX_Q}\")\n            # print(f\"M shape: {M.shape}\")\n            qb = q[h, start_q : (start_q + int(n_ctx_q)), :]\n            # print(f\"qb shape: {qb.shape}\")\n            idxs = [\n                ref_block_tables[h][b][kv_b_i] * BLOCK_N + b_i\n                for kv_b_i in range(len(ref_block_tables[h][b]))\n                for b_i in range(BLOCK_N)\n            ]\n            # print(f'idxs: {idxs}')\n            idxs = torch.tensor(idxs, dtype=torch.int32, device=\"cuda\")\n            kb = torch.index_select(k[h], dim=0, index=idxs)\n            # print(f\"{kb} kb shape: {kb.shape}\")\n            vb = torch.index_select(v[h], dim=0, index=idxs)\n            # print(f\"{vb} vb shape: {vb.shape}\")\n            p = torch.matmul(qb, kb.transpose(0, 1)) * sm_scale\n            # print(f\"p shape: {p.shape}\")\n            p = torch.softmax(p.float(), dim=-1).to(q.dtype)\n            refb = torch.matmul(p, vb)\n            ref_out[h, start_q : (start_q + int(n_ctx_q)), :] = refb\n            # print(f\"refb={refb}\")\n            # print(f\"refb shape: {refb.shape}\")\n            start += b\n            start_q += n_ctx_q\n        start = 0\n        start_q = 0\n\n    # Triton LeanAttention output\n    la_out = persistent_lean_attention_paged(\n        q,\n        k,\n        v,\n        kv_block_tables,\n        Mp,\n        Lp,\n        Op,\n        locks,\n        batch_num_block_n,\n        total_programs,\n        BLOCK_M,\n        BLOCK_N,\n        batch,\n        sm_scale,\n        num_warps,\n        waves_per_eu,\n    )\n    # Compare result\n    atol = 1.4e-1 if init_dtype == \"fp8\" else 1e-2\n    rtol = 1e-2 if init_dtype == \"fp8\" else 3e-3\n    torch.testing.assert_close(ref_out, la_out, atol=atol, rtol=rtol)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "766c57e248b2385cb6d0c2901c6c3d5e5c8fe0adc59576c1f7698cec297cdd981b467490f710eaea4895f4ddf9c638fe02c31994bee0ea86e4169bdde1fb202f_0"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}